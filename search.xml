<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>编译原理第二次上机</title>
      <link href="2020/11/02/bian-yi-yuan-li-di-er-ci-shang-ji-ci-fa-fen-xi-qi/"/>
      <url>2020/11/02/bian-yi-yuan-li-di-er-ci-shang-ji-ci-fa-fen-xi-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理第二次上机-词法分析器"><a href="#编译原理第二次上机-词法分析器" class="headerlink" title="编译原理第二次上机-词法分析器"></a>编译原理第二次上机-词法分析器</h1><h2 id="1-环境："><a href="#1-环境：" class="headerlink" title="1.环境："></a>1.环境：</h2><h3 id="MAC-11-0-JDK1-8-Idea2019-2"><a href="#MAC-11-0-JDK1-8-Idea2019-2" class="headerlink" title="MAC 11.0 JDK1.8 Idea2019.2"></a><code>MAC 11.0 JDK1.8 Idea2019.2</code></h3><h2 id="2-代码实现-Java"><a href="#2-代码实现-Java" class="headerlink" title="2.代码实现(Java)"></a>2.代码实现(Java)</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保留字表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> ReserveWord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//界符表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>Character<span class="token operator">></span> JiefuTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//标识符表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> IDentifierTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//常数表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> DigitBTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保留字32个</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token string">"break"</span><span class="token punctuation">,</span> <span class="token string">"case"</span><span class="token punctuation">,</span> <span class="token string">"char"</span><span class="token punctuation">,</span> <span class="token string">"const"</span><span class="token punctuation">,</span> <span class="token string">"continue"</span><span class="token punctuation">,</span>                <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token string">"do"</span><span class="token punctuation">,</span> <span class="token string">"double"</span><span class="token punctuation">,</span> <span class="token string">"else"</span><span class="token punctuation">,</span> <span class="token string">"enum"</span><span class="token punctuation">,</span> <span class="token string">"extern"</span><span class="token punctuation">,</span>                <span class="token string">"float"</span><span class="token punctuation">,</span> <span class="token string">"for"</span><span class="token punctuation">,</span> <span class="token string">"goto"</span><span class="token punctuation">,</span> <span class="token string">"if"</span><span class="token punctuation">,</span> <span class="token string">"int"</span><span class="token punctuation">,</span> <span class="token string">"long"</span><span class="token punctuation">,</span>                <span class="token string">"register"</span><span class="token punctuation">,</span> <span class="token string">"return"</span><span class="token punctuation">,</span> <span class="token string">"short"</span><span class="token punctuation">,</span> <span class="token string">"signed"</span><span class="token punctuation">,</span> <span class="token string">"sizeof"</span><span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">,</span>                <span class="token string">"struct"</span><span class="token punctuation">,</span> <span class="token string">"switch"</span><span class="token punctuation">,</span> <span class="token string">"typedef"</span><span class="token punctuation">,</span> <span class="token string">"union"</span><span class="token punctuation">,</span> <span class="token string">"unsigned"</span><span class="token punctuation">,</span> <span class="token string">"void"</span><span class="token punctuation">,</span>                <span class="token string">"volatile"</span><span class="token punctuation">,</span> <span class="token string">"while"</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//界符表12个</span>        Character<span class="token punctuation">[</span><span class="token punctuation">]</span> Jiefu <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">,</span> <span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'&amp;#123;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;#125;'</span><span class="token punctuation">,</span> <span class="token string">'.'</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java.until.Arrays提供了asList()方法将数组转换成List对象，但该List是不可变的</span>        ReserveWord<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JiefuTable<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>Jiefu<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//并运算</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是：字母</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">Isletter</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是：数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">IsDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是：界符</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">IsJiefu</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JiefuTable<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是 算数运算符：加减乘</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">IsSuanshuyunsuanfu</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否是 关系运算符：等于（赋值），大于小于（大于等于，小于等于，大于小于）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">IsGuanxiyunsuanfu</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">==</span> <span class="token string">'='</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'&lt;'</span> <span class="token operator">||</span> x <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read_write_File</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"in.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedReader bReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"out.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedWriter bWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>        String content<span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//readLine一行一行的读取</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> bReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是字母或者'_'开头</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Isletter</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">Isletter</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">IsDigit</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//判断是不是保留字</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ReserveWord<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"0(保留字)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//判断是不是标识符</span>                    IDentifierTable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"1(标识符)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"1"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是不是算数运算符</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsSuanshuyunsuanfu</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"2(算数运算符)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"2"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是不是数字</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsDigit</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>count <span class="token operator">&lt;</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">IsDigit</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    DigitBTable<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"3(数字)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"3"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是不是分界符</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsJiefu</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"4(界符)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"4"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是不是关系运算</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsGuanxiyunsuanfu</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'&lt;'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                        count<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'>'</span> <span class="token operator">||</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                            count<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                        count<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'='</span><span class="token punctuation">)</span>                        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                            str <span class="token operator">+=</span> content<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;\t"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"\t,\t"</span><span class="token operator">+</span><span class="token string">"5(关系运算符)"</span><span class="token operator">+</span><span class="token string">"\t>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> <span class="token string">"5"</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span> <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭文件</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">read_write_File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-运行示意图"><a href="#3-运行示意图" class="headerlink" title="3.运行示意图"></a>3.运行示意图</h2><p><img src="https://i.loli.net/2020/11/02/Yg9NLKv7FOb4kaH.png"></p><h2 id="4-源码在Gitee和Github上自取"><a href="#4-源码在Gitee和Github上自取" class="headerlink" title="4.源码在Gitee和Github上自取"></a>4.源码在Gitee和Github上自取</h2><p><a href="https://github.com/fejxc/Compilation-principle">Github</a></p><p><a href="https://gitee.com/fejxc/Compilation-principle">Gitee</a></p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三 </tag>
            
            <tag> 上机实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解Web校园网</title>
      <link href="2020/11/01/po-jie-web-xiao-yuan-wang/"/>
      <url>2020/11/01/po-jie-web-xiao-yuan-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="破解Web校园网"><a href="#破解Web校园网" class="headerlink" title="破解Web校园网"></a>破解Web校园网</h1><h2 id="1-准备一个已经刷好不死鸟的路由器"><a href="#1-准备一个已经刷好不死鸟的路由器" class="headerlink" title="1.准备一个已经刷好不死鸟的路由器"></a>1.准备一个已经刷好不死鸟的路由器</h2><p>K2 ，K2P ，小米， 新三路由等等 都可以</p><h2 id="2-去OpenWrt官网下载对应自己路由版本的固件"><a href="#2-去OpenWrt官网下载对应自己路由版本的固件" class="headerlink" title="2.去OpenWrt官网下载对应自己路由版本的固件"></a>2.去OpenWrt官网下载对应自己路由版本的固件</h2><h2 id="3-将固件刷好"><a href="#3-将固件刷好" class="headerlink" title="3.将固件刷好"></a>3.将固件刷好</h2><p><code>前面3个步骤不会的，可以度娘</code></p><h2 id="4-通过SSH登陆路由器"><a href="#4-通过SSH登陆路由器" class="headerlink" title="4.通过SSH登陆路由器"></a>4.通过SSH登陆路由器</h2><p>1.<code>ssh root@192.168.1.1</code></p><p>2.<code>opkg update</code></p><p>3.<code>opkg install privoxy</code></p><p>4.<code>opkg install luci-app-privoxy</code></p><p>5.<code>opkg install curl</code></p><h2 id="5-在路由器里添加自动认证脚本"><a href="#5-在路由器里添加自动认证脚本" class="headerlink" title="5.在路由器里添加自动认证脚本"></a>5.在路由器里添加自动认证脚本</h2><p>1.<code>cd /etc</code></p><p>2.<code>vim web.sh</code></p><p>内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>studentid<span class="token operator">=</span><span class="token string">''</span> <span class="token comment" spellcheck="true"># 用户名</span>password<span class="token operator">=</span><span class="token string">''</span>      <span class="token comment" spellcheck="true"># 密码</span>IP<span class="token operator">=</span><span class="token punctuation">$(</span>ubus call network.interface.wan status <span class="token operator">|</span> <span class="token function">grep</span> \<span class="token string">"address\" | grep -oE '[0-9]&amp;#123;1,3&amp;#125;\.[0-9]&amp;#123;1,3&amp;#125;\.[0-9]&amp;#123;1,3&amp;#125;\.[0-9]&amp;#123;1,3&amp;#125;')function login() &amp;#123;    #IP="</span>10.73.11.167<span class="token string">"    echo "</span>DDDDD<span class="token operator">=</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;studentid&amp;#125;&amp;upass=$&amp;#123;password&amp;#125;&amp;R1=0&amp;R2=&amp;R6=0&amp;para=00&amp;0MKKey=123456&amp;buttonClicked=&amp;redirect_url=&amp;err_flag=&amp;username=&amp;password=&amp;user=&amp;cmd=&amp;Login=&amp;R7=0"</span>    statusfull<span class="token operator">=</span><span class="token punctuation">$(</span>curl <span class="token string">'http://192.168.167.46/a70.htm'</span> \        -X POST \        -H <span class="token string">"Cookie: program=ip; vlan=0; md5_login2=$&amp;#123;studentid&amp;#125;%7C$&amp;#123;password&amp;#125;; ip=$&amp;#123;IP&amp;#125;"</span> \        --data-raw <span class="token string">"DDDDD=$&amp;#123;studentid&amp;#125;&amp;upass=$&amp;#123;password&amp;#125;&amp;R1=0&amp;R2=&amp;R6=0&amp;para=00&amp;0MKKey=123456&amp;buttonClicked=&amp;redirect_url=&amp;err_flag=&amp;username=&amp;password=&amp;user=&amp;cmd=&amp;Login=&amp;R7=0"</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> <span class="token string">"$&amp;#123;statusfull&amp;#125;"</span>    status<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token string">"$&amp;#123;statusfull&amp;#125;"</span> <span class="token operator">|</span> <span class="token function">grep</span> -a -oE <span class="token string">'&lt;!--Dr.COMWebLoginID_[0-9]\.htm-->'</span><span class="token punctuation">)</span>    <span class="token keyword">echo</span> $<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;status&amp;#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$status</span> <span class="token operator">==</span> <span class="token string">'&lt;!--Dr.COMWebLoginID_2.htm-->'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        errormsg<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token string">"$&amp;#123;statusfull&amp;#125;"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'msga'</span> <span class="token operator">|</span> <span class="token function">grep</span> -oE <span class="token string">"msga='.*'"</span><span class="token punctuation">)</span>        logger -t <span class="token string">"校园网认证"</span> <span class="token string">"Login Failed:$&amp;#123;errormsg&amp;#125;"</span>        <span class="token keyword">echo</span> <span class="token string">"Log Failed:$&amp;#123;errormsg&amp;#125;"</span>        <span class="token function">sleep</span> 1        login    <span class="token keyword">else</span>        lasturl<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token string">"$&amp;#123;statusfull&amp;#125;"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'UL'</span> <span class="token operator">|</span> <span class="token function">grep</span> -oE <span class="token string">"UL='.*'"</span><span class="token punctuation">)</span>        logger -t <span class="token string">"校园网认证"</span> <span class="token string">"Login Success:$&amp;#123;lasturl&amp;#125;"</span>    <span class="token keyword">fi</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">function</span> checkstatus<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    status<span class="token operator">=</span><span class="token punctuation">$(</span>curl <span class="token string">'http://192.168.167.46/'</span> \        -H <span class="token string">"Cookie: program=ip; vlan=0; md5_login2=$&amp;#123;studentid&amp;#125;%7C$&amp;#123;password&amp;#125;; ip=$&amp;#123;IP&amp;#125;"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'Dr.COMWebLoginID'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 3成功2失败</span><span class="token keyword">function</span> oneloop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    checkstatus    <span class="token keyword">echo</span> $<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;status&amp;#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$status</span> <span class="token operator">==</span> <span class="token string">'&lt;!--Dr.COMWebLoginID_1.htm-->'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">'Normal'</span>        logger <span class="token string">'Normal'</span>        <span class="token function">sleep</span> 1    <span class="token keyword">else</span>        logger -t <span class="token string">"校园网认证"</span> <span class="token string">"Disconnected"</span>        <span class="token function">sleep</span> 13 <span class="token comment" spellcheck="true"># 虽然报错是3s，但是实际上应该是13s，猜测是检测10s+冷却3s</span>        logger -t <span class="token string">"校园网认证"</span> <span class="token string">"Try to Connect"</span>        login        <span class="token keyword">echo</span> <span class="token string">'Logged'</span>    <span class="token keyword">fi</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    oneloop<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.<code>sudo chmod 777 web.sh</code>   </p><p>4.<code>cd /etc</code></p><p>5.<code>vim rc.local</code></p><p>增加代码</p><pre class="line-numbers language-bash"><code class="language-bash">/etc/web.sh <span class="token operator">></span>dev/null 2<span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span><span class="token keyword">exit</span> 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-配置Privoxy"><a href="#5-配置Privoxy" class="headerlink" title="5.配置Privoxy"></a>5.配置Privoxy</h2><p><img src="https://i.loli.net/2020/11/01/HGXAbyCjIaL98Od.jpg"></p><p><img src="https://i.loli.net/2020/11/01/ThWBtALZxCgSJQK.jpg"></p><p><img src="https://i.loli.net/2020/11/01/cWzRK1QosuIfMd9.jpg"></p><p>打开<code>http://config.privoxy.org/edit-actions-list?f=0</code></p><p>在Action 那一列中，hide-user-agent 改选为 Enable（绿色）</p><h2 id="6-配置防火墙规则"><a href="#6-配置防火墙规则" class="headerlink" title="6.配置防火墙规则"></a>6.配置防火墙规则</h2><pre class="line-numbers language-bash"><code class="language-bash">iptables -t nat -N ntp_force_localiptables -t nat -I PREROUTING -p udp --dport 123 -j ntp_force_localiptables -t nat -A ntp_force_local -d 0.0.0.0/8 -j RETURNiptables -t nat -A ntp_force_local -d 127.0.0.0/8 -j RETURNiptables -t nat -A ntp_force_local -d 192.168.0.0/16 -j RETURNiptables -t nat -A ntp_force_local -s 192.168.0.0/16 -j DNAT --to-destination 192.168.1.1iptables -t nat -N http_ua_dropiptables -t nat -I PREROUTING -p tcp --dport 80 -j http_ua_dropiptables -t nat -A http_ua_drop -d 0.0.0.0/8 -j RETURNiptables -t nat -A http_ua_drop -d 127.0.0.0/8 -j RETURNiptables -t nat -A http_ua_drop -d 192.168.0.0/16 -j RETURNiptables -t nat -I http_ua_drop -m mac --mac-source 00:5B:94:A5:57:7C -j RETURN iptables -t nat -I http_ua_drop -m mac --mac-source D0:C6:37:B9:3B:0B -j RETURN iptables -t nat -I http_ua_drop -m mac --mac-source 86:4E:D5:73:F7:60 -j RETURN iptables -t nat -I http_ua_drop -m mac --mac-source B6:28:D1:E2:9D:D9 -j RETURN iptables -t nat -A http_ua_drop -p tcp -j REDIRECT --to-port 8118 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-同步时间"><a href="#7-同步时间" class="headerlink" title="7.同步时间"></a>7.同步时间</h2><p><img src="https://i.loli.net/2020/11/01/aPuvhVdHBc67nQE.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github pages的Custom domain配置</title>
      <link href="2020/10/29/github-pages-de-custom-domain-pei-zhi/"/>
      <url>2020/10/29/github-pages-de-custom-domain-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo发布后，github-pages的Custom-domain配置项被清空"><a href="#hexo发布后，github-pages的Custom-domain配置项被清空" class="headerlink" title="hexo发布后，github pages的Custom domain配置项被清空"></a>hexo发布后，github pages的Custom domain配置项被清空</h1><pre><code>hexo cleanhexo ghexo d</code></pre><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p><code>命令执行，每次发布可以成功，但是发布成功之后github pages的Custom domain配置项就被清空了，要手动进入setting上重新设置好然后save</code></p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p><code>在source目录下 新建 CNAME文件 不指定类型</code></p><p><code>在CNAME里写你的域名地址</code></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github与gitee代码同步push教程</title>
      <link href="2020/10/29/github-yu-gitee-dai-ma-tong-bu-push-jiao-cheng/"/>
      <url>2020/10/29/github-yu-gitee-dai-ma-tong-bu-push-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="github与gitee代码同步push教程"><a href="#github与gitee代码同步push教程" class="headerlink" title="github与gitee代码同步push教程"></a>github与gitee代码同步push教程</h1><h2 id="步骤1："><a href="#步骤1：" class="headerlink" title="步骤1："></a>步骤1：</h2><pre><code>在gitee在已经有仓库复制该仓库的 https://gitee.com/*******.git 的https地址</code></pre><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2:"></a>步骤2:</h2><p><img src="https://i.loli.net/2020/10/29/AUy38BqXa6MwRLb.png"></p><p>选择<code>Import repository</code></p><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3:"></a>步骤3:</h2><p><img src="https://i.loli.net/2020/10/29/GXzfPomnd5WZ4bK.png"></p><p>``URL 输入刚刚gitee上的 <a href="https://gitee.com/*******.git%60">https://gitee.com/*******.git`</a></p><p><code>fejxc/写你在github上的仓库名</code></p><p><code>然后点击 Begin import 即可</code></p><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4:"></a>步骤4:</h2><p>1.先将gitee项目的代码克隆到本地电脑</p><p>2.然后修改config文件   文件在 <code>.git/concig</code></p><p>3.修改如下</p><pre><code>[core]    repositoryformatversion = 0    filemode = true    bare = false    logallrefupdates = true    ignorecase = true    precomposeunicode = true[remote &quot;origin&quot;]    # github    url = git@github.com:*****.git  #add code    # gitee    url = https://gitee.com/*****.git    fetch = +refs/heads/*:refs/remotes/origin/*[branch &quot;master&quot;]  #add code    remote = origin    merge = refs/heads/master</code></pre><h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5:"></a>步骤5:</h2><p>验证代码：</p><pre><code>git add .git commit -m &quot;init&quot;git push</code></pre><h2 id="成功图示："><a href="#成功图示：" class="headerlink" title="成功图示："></a>成功图示：</h2><p><img src="https://i.loli.net/2020/10/29/ewKI8izumR6JkhV.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openWrt卸载已经安装的ipk安装包教程</title>
      <link href="2020/10/28/openwrt-xie-zai-yi-jing-an-zhuang-de-ipk-an-zhuang-bao-jiao-cheng/"/>
      <url>2020/10/28/openwrt-xie-zai-yi-jing-an-zhuang-de-ipk-an-zhuang-bao-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="openWrt卸载已经安装的ipk安装包教程"><a href="#openWrt卸载已经安装的ipk安装包教程" class="headerlink" title="openWrt卸载已经安装的ipk安装包教程"></a>openWrt卸载已经安装的ipk安装包教程</h1><h2 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h2><p> 系统：OpenWrt 18.06.4</p><p>内核版本：4.14.131</p><h2 id="2-安装ipk"><a href="#2-安装ipk" class="headerlink" title="2.安装ipk"></a>2.安装ipk</h2><p><code>cd /ipk的文件路径</code></p><p><code>opkg install ***.ipk</code></p><h2 id="3-卸载ipk"><a href="#3-卸载ipk" class="headerlink" title="3.卸载ipk"></a>3.卸载ipk</h2><p><code>opkg list_installed</code>  查看已经安装的ipk</p><p><img src="https://i.loli.net/2020/10/28/M36mUtJCkWwxuSc.png"></p><p><code>opkg remove ***.ipk</code></p><p><img src="https://i.loli.net/2020/10/28/ROX9uAfQLcNTVSC.png"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE使用axios数据请求时报错 TypeError Cannot set property &#39;xxxx&#39; of undefined 的解决办法</title>
      <link href="2020/10/28/vue-zhong-shi-yong-bootstrap-de-liang-chong-fang-fa/"/>
      <url>2020/10/28/vue-zhong-shi-yong-bootstrap-de-liang-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="vue中使用bootstrap的两种方法"><a href="#vue中使用bootstrap的两种方法" class="headerlink" title="vue中使用bootstrap的两种方法"></a>vue中使用bootstrap的两种方法</h1><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><p>在index.html页面中引入即可</p><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><p>npm i bootstrap –save下载以后<br> 在src/main.js中导入即可：<br> <code>import &#39;bootstrap/dist/css/bootstrap.min.css&#39;</code></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue入门</title>
      <link href="2020/10/28/1.vue-ru-men/"/>
      <url>2020/10/28/1.vue-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue入门"><a href="#1-Vue入门" class="headerlink" title="1.Vue入门"></a>1.Vue入门</h2><h3 id="1-1下载Vuejs"><a href="#1-1下载Vuejs" class="headerlink" title="1.1下载Vuejs"></a>1.1下载Vuejs</h3><p>[<a href="https://cn.vuejs.org]">https://cn.vuejs.org]</a></p><h3 id="1-2Vue入门"><a href="#1-2Vue入门" class="headerlink" title="1.2Vue入门"></a>1.2Vue入门</h3><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  msg  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pwd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>pwd<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../static/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用来给vue实例定义一个范围</span>            data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                msg<span class="token punctuation">:</span> <span class="token string">"欢迎学习vue！"</span><span class="token punctuation">,</span>                name<span class="token punctuation">:</span><span class="token string">"sunyun"</span><span class="token punctuation">,</span>                pwd<span class="token punctuation">:</span><span class="token string">"11111"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//给vue定义一些相关数据</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span>msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>lists<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../static/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用来给vue实例定义一个范围</span>            data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                msg<span class="token punctuation">:</span> <span class="token string">"欢迎学习vue！"</span><span class="token punctuation">,</span>                user<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"sunyun"</span><span class="token punctuation">,</span>msg<span class="token punctuation">:</span><span class="token string">"handsomeBoy!"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                age<span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span>                lists<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"jiangxi"</span><span class="token punctuation">,</span><span class="token string">"shangrao"</span><span class="token punctuation">,</span><span class="token string">"yushan"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                users<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"sy"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token string">"20"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>naem<span class="token punctuation">:</span><span class="token string">"hauhau"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token string">"21"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//给vue定义一些相关数据</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"../static/vue.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//用来给vue实例定义一个范围</span>            data<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                msg<span class="token punctuation">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//给vue定义一些相关数据</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>总结</span><span class="token code keyword">    1.vue实例对象中的el属性： 代表Vue的作用范围  日后Vue的用作范围都可以用Vue语法</span><span class="token code keyword">    2.Vue实例中的data属性： 用来给Vue实例绑定一些相关的数据，绑定的数据可以通过&amp;#123;&amp;#123;变量名&amp;#125;&amp;#125;在Vue作用范围内去取出来</span><span class="token code keyword">    3.在使用&amp;#123;&amp;#123;&amp;#125;&amp;#125;取值可以书写表达式以及逻辑运算，调用相关的方法</span><span class="token code keyword">4.el属性可以书写任意的css选择器，在Vue开发时候推荐使用id选择器</span>```<span class="token title important"><span class="token punctuation">##</span> 2. v-text和v-html</span><span class="token title important"><span class="token punctuation">###</span> 2.1 v-text</span>```markdown<span class="token title important"><span class="token punctuation">#</span>总结</span>1.使用v-text取值会覆盖标签中原有的数据，使用<span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#123;">&amp;#123;</span><span class="token entity" title="&#125;">&amp;#125;</span><span class="token entity" title="&#125;">&amp;#125;</span>则不会覆盖2.使用v-text可以避免在网络环境差的情况下出现插值闪烁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-v-html"><a href="#2-2-v-html" class="headerlink" title="2.2 v-html"></a>2.2 v-html</h3><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下mysql突然启动不了的解决办法</title>
      <link href="2020/10/27/mac-xia-mysql-tu-ran-qi-dong-bu-liao-de-jie-jue-ban-fa/"/>
      <url>2020/10/27/mac-xia-mysql-tu-ran-qi-dong-bu-liao-de-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="mac下mysql突然启动不了的解决办法"><a href="#mac下mysql突然启动不了的解决办法" class="headerlink" title="mac下mysql突然启动不了的解决办法"></a>mac下mysql突然启动不了的解决办法</h1><h2 id="1-输入："><a href="#1-输入：" class="headerlink" title="1.输入："></a>1.输入：</h2><h3 id="sudo-chown-R-mysql-usr-local-mysql-data"><a href="#sudo-chown-R-mysql-usr-local-mysql-data" class="headerlink" title="sudo chown -R mysql /usr/local/mysql/data"></a><code>sudo chown -R mysql /usr/local/mysql/data</code></h3><h2 id="2-原因是某种情况下导致”-usr-local-MySQL-data”的拥有者发生了改变，所以只需要将其拥有者修改为“mysql“就可以了。"><a href="#2-原因是某种情况下导致”-usr-local-MySQL-data”的拥有者发生了改变，所以只需要将其拥有者修改为“mysql“就可以了。" class="headerlink" title="2.原因是某种情况下导致”/usr/local/MySQL/data”的拥有者发生了改变，所以只需要将其拥有者修改为“mysql“就可以了。"></a>2.原因是某种情况下导致”/usr/local/MySQL/data”的拥有者发生了改变，所以只需要将其拥有者修改为“mysql“就可以了。</h2>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE使用axios数据请求时报错 TypeError Cannot set property &#39;xxxx&#39; of undefined 的解决办法</title>
      <link href="2020/10/27/vue-shi-yong-axios-shu-ju-qing-qiu-shi-bao-cuo-typeerror-cannot-set-property-xxxx-of-undefined-de-jie-jue-ban-fa/"/>
      <url>2020/10/27/vue-shi-yong-axios-shu-ju-qing-qiu-shi-bao-cuo-typeerror-cannot-set-property-xxxx-of-undefined-de-jie-jue-ban-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE使用axios数据请求时报错-TypeError-Cannot-set-property-‘xxxx’-of-undefined-的解决办法"><a href="#VUE使用axios数据请求时报错-TypeError-Cannot-set-property-‘xxxx’-of-undefined-的解决办法" class="headerlink" title="VUE使用axios数据请求时报错 TypeError: Cannot set property ‘xxxx’ of undefined 的解决办法"></a>VUE使用axios数据请求时报错 TypeError: Cannot set property ‘xxxx’ of undefined 的解决办法</h1><h2 id="1-报错图示"><a href="#1-报错图示" class="headerlink" title="1.报错图示"></a>1.报错图示</h2><p><img src="https://i.loli.net/2020/10/27/oVzENYtSadu98Z7.png"></p><h2 id="2-正常的在data中定义了users"><a href="#2-正常的在data中定义了users" class="headerlink" title="2.正常的在data中定义了users"></a>2.正常的在data中定义了users</h2><pre class="line-numbers language-vue"><code class="language-vue"><script>    export default &#123;        name: "User",        data()&#123;            return&#123;                 users:[]            &#125;        &#125;,        methods:&#123;&#125;,        components:&#123;&#125;,        created() &#123;            this.$http.get("http://rap2api.taobao.org/app/mock/269320/findAll?page=1&rows=4").then(function (respose) &#123;                console.log(respose.data);                this.users = respose.data.results;            &#125;)        &#125;,    &#125;</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-报错分析"><a href="#3-报错分析" class="headerlink" title="3.报错分析"></a>3.报错分析</h2><p>在函数里面进行赋值<br><code>this.users = respose.data.results;</code><br>这时候你运行时会发现，数据可以请求到，但是会报错TypeError: Cannot set property ‘users’ of undefined</p><p>主要原因是：</p><p>在 then的内部不能使用Vue的实例化的this, 因为在内部 this 没有被绑定。</p><h2 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h2><h3 id="1、在请求axios外面定义一下-let-this-this"><a href="#1、在请求axios外面定义一下-let-this-this" class="headerlink" title="1、在请求axios外面定义一下 let _this=this"></a>1、在请求axios外面定义一下<code> let _this=this</code></h3><pre class="line-numbers language-vue"><code class="language-vue">created() &#123;            let _this=this;            this.$http.get("http://rap2api.taobao.org/app/mock/269320/findAll?page=1&rows=4").then(function (respose) &#123;                console.log(respose.data);                _this.users = respose.data.results;            &#125;)        &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、用ES6箭头函数，箭头方法可以和父方法共享变量"><a href="#2、用ES6箭头函数，箭头方法可以和父方法共享变量" class="headerlink" title="2、用ES6箭头函数，箭头方法可以和父方法共享变量"></a>2、用ES6箭头函数，箭头方法可以和父方法共享变量</h3><pre class="line-numbers language-vue"><code class="language-vue">created() &#123;            this.$http.get("http://rap2api.taobao.org/app/mock/269320/findAll?page=1&rows=4").then( (respose) =>&#123;                console.log(respose.data);                this.users = respose.data.results;            &#125;)        &#125;,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-效果"><a href="#5-效果" class="headerlink" title="5.效果"></a>5.效果</h2><p><img src="https://i.loli.net/2020/10/27/vzlqMfJcrm8WjTF.png"></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI脚手架</title>
      <link href="2020/10/27/vue-cli-jiao-shou-jia/"/>
      <url>2020/10/27/vue-cli-jiao-shou-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Vue-CLI脚手架"><a href="#1-Vue-CLI脚手架" class="headerlink" title="1.Vue CLI脚手架"></a>1.Vue CLI脚手架</h2><h3 id="1-1什么是CLI"><a href="#1-1什么是CLI" class="headerlink" title="1.1什么是CLI"></a>1.1什么是CLI</h3><p>​        命令行界面<strong>（英语：</strong>command-line interface<strong>，<a href="https://baike.baidu.com/item/%E7%BC%A9%E5%86%99/1948062">缩写</a>：</strong>CLI<strong>）是在<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BD%A2%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/3352324">图形用户界面</a>得到普及之前使用最为广泛的<a href="https://baike.baidu.com/item/%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/6582461">用户界面</a>，它通常不支持<a href="https://baike.baidu.com/item/%E9%BC%A0%E6%A0%87/122323">鼠标</a>，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为</strong>字符用户界面**（<a href="https://baike.baidu.com/item/CUI/7671744">CUI</a>）。</p><h3 id="1-2什么是Vue-CLI"><a href="#1-2什么是Vue-CLI" class="headerlink" title="1.2什么是Vue CLI"></a>1.2什么是Vue CLI</h3><p>​        Vue CLI 是一个基于 Vue.js 进行快速开发的完整系统。使用Vue脚手架之后开发之后的页面是一个完整的系统。</p><h3 id="1-3VueCLI优势"><a href="#1-3VueCLI优势" class="headerlink" title="1.3VueCLI优势"></a>1.3VueCLI优势</h3><ul><li><p>通过 <code>@vue/cli</code> 实现的交互式的项目脚手架。</p></li><li><p>通过 <code>@vue/cli</code> + <code>@vue/cli-service-global</code> 实现的零配置原型开发。vuejs vuerouter axios(一条命令)</p></li><li><p>一个运行时依赖 (</p><pre><code>@vue/cli-service</code></pre><p>)，该依赖：</p><ul><li>可升级；</li><li>基于 webpack 构建，并带有合理的默认配置；<code>webpack项目打包的方式，编译好的项目源码，部署到服务器上直接使用。</code></li><li>可以通过项目内的配置文件进行配置； 修改配置文件，达到自己想要的环境。</li><li>可以通过插件进行扩展。 vue v-charts ……</li></ul></li><li><p>一个丰富的官方插件集合，集成了前端生态中最好的工具。 Nodejs(tomcat) Vue VueRouter webpack yarn</p></li><li><p>一套完全图形化的创建和管理 Vue.js 项目的用户界面。</p></li></ul><h3 id="1-4Vue-CLI安装"><a href="#1-4Vue-CLI安装" class="headerlink" title="1.4Vue CLI安装"></a>1.4Vue CLI安装</h3><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.下载nodejs</span><span class="token code keyword">    http://nodejs.cn/download/</span><span class="token code keyword">    windows .msi(exe)  .zip（压缩包）直接解压路径</span><span class="token code keyword">    mac .pkg(安装包)自动配置  .tar.gz（压缩包)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/10/27/lQuBxM9ntbTaGzP.png"></p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 2.nodejs环境配置</span><span class="token code keyword">    windows系统：</span><span class="token code keyword">        1.计算机属性---》 高级属性 ----》 环境变量 添加如下配置：</span><span class="token code keyword">            NODE_HOME = nodejs安装目录</span><span class="token code keyword">            PATH = xxxx;%NODE_HOME%/bin</span><span class="token code keyword">    mac系统：</span><span class="token code keyword">        pkg 自动配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/10/27/7zgK4GMbOTFHlJq.png" alt="mac下pkg安装"></p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 3.检查安装</span><span class="token code keyword">    node -v</span><span class="token title important"><span class="token punctuation">#</span> 4.npm的介绍</span><span class="token code keyword">    node package mangager nodejs包的管理工具  前端主流技术都可以用npm 进行同意管理</span><span class="token code keyword">    maven 管理java后端依赖  远程仓库  阿里云镜像</span><span class="token code keyword">    npm 管理前端系统依赖    远程仓库(中心仓库，在国外) 淘宝镜像</span><span class="token title important"><span class="token punctuation">#</span> 5.配置淘宝镜像</span><span class="token code keyword">    npm config set registry https://registry.npm.taobao.org</span><span class="token title important"><span class="token punctuation">#</span> 6配置后可通过下面方式来验证是否成功</span><span class="token code keyword">    npm config get registry</span><span class="token code keyword">    或 npm info express</span><span class="token title important"><span class="token punctuation">#</span> 7.配置npm下载依赖的位置  (不推荐配置 配置后mac输入vue会报错)</span><span class="token code keyword">    查看默认位置：npm config ls  </span><span class="token code keyword">    npm config set cache /Users/sunyun/Documents/nodereps/...</span><span class="token code keyword">    npm config set prefix /Users/sunyun/Documents/nodereps/...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/10/27/CKLpm31hOYTUXM7.png"></p><h4 id="2-安装脚手架"><a href="#2-安装脚手架" class="headerlink" title="2.安装脚手架"></a>2.安装脚手架</h4><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 0.删除旧的版本的脚手架</span><span class="token code keyword">    npm uninstall -g @vue/cli  //3版本</span><span class="token code keyword">    num uninstall -g vue-cli //2版本</span><span class="token title important"><span class="token punctuation">#</span> 1.Vue CLI的安装</span><span class="token code keyword">    https://github.com/vuejs/vue-cli/tree/v2#vue-cli--</span><span class="token title important"><span class="token punctuation">#</span> 2.安装Vue CLI</span><span class="token code keyword">    npm install -g vue-cli  //2版本的脚手架</span><span class="token title important"><span class="token punctuation">#</span> 3. mac 提示Vue not found</span>exoprt PATH="$PATH:/Users/sunyun/Documents/nodereps/npm<span class="token italic"><span class="token punctuation">_</span>global/bin/vue"Last login: Tue Oct 27 13:15:56 on ttys000sunyun@MacBook-Pro ~ % npm install -g vue-clinpm WARN deprecated vue-cli@2.9.6: This package has been deprecated in favour of @vue/clinpm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to "coffeescript" (no hyphen)npm WARN deprecated har-validator@5.1.5: this/Users/sunyun/Documents/nodereps/npm<span class="token punctuation">_</span></span>global/bin/vue -> /Users/sunyun/Documents/nodereps/npm<span class="token italic"><span class="token punctuation">_</span>global/lib/node<span class="token punctuation">_</span></span>modules/vue-cli/bin/vue/Users/sunyun/Documents/nodereps/npm<span class="token italic"><span class="token punctuation">_</span>global/bin/vue-init -> /Users/sunyun/Documents/nodereps/npm<span class="token punctuation">_</span></span>global/lib/node<span class="token italic"><span class="token punctuation">_</span>modules/vue-cli/bin/vue-init/Users/sunyun/Documents/nodereps/npm<span class="token punctuation">_</span></span>global/bin/vue-list -> /Users/sunyun/Documents/nodereps/npm<span class="token italic"><span class="token punctuation">_</span>global/lib/node<span class="token punctuation">_</span></span>modules/vue-cli/bin/vue-list<span class="token list punctuation">+</span> vue-cli@2.9.6updated 1 package in 6.825ssunyun@MacBook-Pro ~ % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-第一个Vue-CLI脚手架项目"><a href="#3-第一个Vue-CLI脚手架项目" class="headerlink" title="3.第一个Vue CLI脚手架项目"></a>3.第一个Vue CLI脚手架项目</h4><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.创建vue脚手架的第一个项目</span><span class="token code keyword">    vue init webpack hello(项目名)</span><span class="token title important"><span class="token punctuation">#</span> 2.创建第一个项目</span><span class="token code keyword">    sunyun@MacBook-Pro Vue_CLI % vue init webpack hello</span>? Project name hello? Project description A Vue.js project? Author 风儿继续吹 &lt;1031364436@qq.com>? Vue build standalone? Install vue-router? Yes? Use ESLint to lint your code? No? Set up unit tests No? Setup e2e tests with Nightwatch? No? Should we run <span class="token code keyword">`npm install`</span> for you after the project has been created? (recommended) npm   vue-cli · Generated "hello"<span class="token title important"><span class="token punctuation">#</span> Project initialization finished!</span><span class="token title important"><span class="token punctuation">#</span> ========================</span>To get started:  cd hello  npm run devDocumentation can be found at https://vuejs-templates.github.io/webpacksunyun@MacBook-Pro Vue_CLI % <span class="token title important"><span class="token punctuation">#</span> 3.如何运行</span><span class="token code keyword">     cd 到项目名 package.json 同级目录下 (根目录)</span><span class="token code keyword">     npm start</span><span class="token code keyword">     Your application is running here: http://localhost:8080     </span><span class="token title important"><span class="token punctuation">#</span> 4.vue cli 中项目的开发方式</span><span class="token code keyword">     注意⚠️：一切皆组件，一个组件 js代码 html代码 css样式</span><span class="token code keyword">    1. VueCli开发方式是在项目中开发一个一个组件的对应一个业务功能模块，日后可以将多个组件组合一起形成一个前端系        统</span><span class="token code keyword">    2.日后在使用不饿cli开发时候，不再书写html，编写的是一个组件，日后打包成vue时，cli会将vue编译成运行的html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/10/27/XQJvBfLFRThwSrC.png" alt="运行成功界面"></p><p><img src="https://i.loli.net/2020/10/27/YZ9rn3gXTh4tuM8.png" alt="vue cli项目文件结构"></p><h3 id="1-5vue-CLI的第一个入门案例"><a href="#1-5vue-CLI的第一个入门案例" class="headerlink" title="1.5vue CLI的第一个入门案例"></a>1.5vue CLI的第一个入门案例</h3><p><a href="https://gitee.com/fejxc/vue-cli">源码在码云Gitee上</a></p><h2 id="2-在脚手架中安装axios"><a href="#2-在脚手架中安装axios" class="headerlink" title="2.在脚手架中安装axios"></a>2.在脚手架中安装axios</h2><h3 id="2-1安装axios"><a href="#2-1安装axios" class="headerlink" title="2.1安装axios"></a>2.1安装axios</h3><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.安装axios</span><span class="token code keyword">    npm install axios --save-dev</span><span class="token title important"><span class="token punctuation">#</span> 2.配置main.js中引入axios</span><span class="token code keyword">    import axios from 'axios'</span><span class="token code keyword">    Vue.prototype.$http=axios; //修改内部的$http为axios</span><span class="token code keyword">    注意：$http 是vue内部的异步，没有axios好</span><span class="token title important"><span class="token punctuation">#</span> 3.使用axios</span><span class="token code keyword">    在需要发异步请求的地方： this.$http.get("url").then((res))=>&amp;#123;&amp;#125;)</span><span class="token code keyword">    this.$http.post("url").then((res))=>&amp;#123;&amp;#125;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Vue-CLI脚手架项目的打包和部署"><a href="#3-Vue-CLI脚手架项目的打包和部署" class="headerlink" title="3.Vue CLI脚手架项目的打包和部署"></a>3.Vue CLI脚手架项目的打包和部署</h2><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 1.在项目的根目录，就是有package.json文件的同级目录，执行如下命令</span><span class="token code keyword">    npm run build</span><span class="token code keyword">    b</span><span class="token code keyword">    注意：vue cli 打包的项目必须在服务器上运行，不能直接双击运行</span><span class="token title important"><span class="token punctuation">#</span> 2.大包之后变化</span><span class="token code keyword">    在打包后，项目中出现dist目录，就是vue cli 的部署目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令清单</title>
      <link href="2020/10/15/git-chang-yong-ming-ling-qing-dan/"/>
      <url>2020/10/15/git-chang-yong-ming-ling-qing-dan/</url>
      
        <content type="html"><![CDATA[<h3 id="git常用命令清单"><a href="#git常用命令清单" class="headerlink" title="git常用命令清单"></a>git常用命令清单</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> status/**红色 文件修改 还没添加到版本库绿色 文件已经添加到版本库 还没有提交*/<span class="token function">git</span> config --global user.name <span class="token string">""</span><span class="token function">git</span> config --global user.email <span class="token string">""</span><span class="token function">git</span> add xxx<span class="token function">git</span> commit -m <span class="token string">""</span><span class="token function">git</span> log<span class="token function">git</span> log --pretty<span class="token operator">=</span>oneline<span class="token function">git</span> reflog //显示所有历史版本记录<span class="token function">git</span> reset --hard 版本id //回退版本<span class="token function">git</span> checkout -- 文件 //撤回工作区的修改<span class="token function">git</span> reset HEAD 文件 //撤回暂存区的修改，要先reset 然后 checkout<span class="token function">git</span> checkout --文件//版本库的删除<span class="token function">rm</span> 文件 目录<span class="token function">git</span> <span class="token function">rm</span> 文件 目录<span class="token function">git</span> commit -m <span class="token string">""</span>//取消删除<span class="token function">git</span> checkout -- 文件名//创建分支<span class="token function">git</span> checkout -b 分支名//切换分支<span class="token function">git</span> checkout 分支名//合并分支（先切换到主分支）<span class="token function">git</span> merge 要合并的分支名//远程仓库操作<span class="token function">git</span> clone url<span class="token function">git</span> remote add origin url  //将对本地git添加远程仓库<span class="token function">git</span> remote remove origin //删除原有的仓库地址<span class="token function">git</span> push -u origin 分支名 //本地分支推送到远程仓库<span class="token function">git</span> push -f origin 分支名  //-u更新 -f强制更新<span class="token function">git</span> push -d origin 分支名<span class="token function">git</span> pull origin 分支名    ssh-keygen -t rsa -C <span class="token string">"gitee/github用户名"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2020/10/15/git-chang-yong-ming-ling/"/>
      <url>2020/10/15/git-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><h2 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1-创建版本库"></a>1-创建版本库</h2><p>什么是版本库呢？版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：</p><p><img src="https://i.loli.net/2020/10/15/Y9wro58utA4ET7c.png"></p><pre><code>$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit</code></pre><p><code>pwd</code>命令用于显示当前目录。在我的Mac上，这个仓库位于<code>/Users/michael/learngit</code>。</p><p> 如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。</p><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p><pre><code>$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><p>言归正传，现在我们编写一个<code>readme.txt</code>文件，内容如下：</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。</p><p>和把大象放到冰箱需要3步相比，把一个文件放到Git仓库只需要两步。</p><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><pre><code>$ git add readme.txt</code></pre><p>执行上面的命令，没有任何显示，这就对了，Unix的哲学是“没有消息就是好消息”，说明添加成功。</p><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><pre><code>$ git commit -m &quot;wrote a readme file&quot;[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt</code></pre><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p><pre><code>$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot;</code></pre><h3 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h3><p>Q：输入<code>git add readme.txt</code>，得到错误：<code>fatal: not a git repository (or any of the parent directories)</code>。</p><p>A：Git命令必须在Git仓库目录内执行（<code>git init</code>除外），在仓库目录外执行是没有意义的。</p><p>Q：输入<code>git add readme.txt</code>，得到错误<code>fatal: pathspec &#39;readme.txt&#39; did not match any files</code>。</p><p>A：添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在总结一下今天学的两点内容：</p><p>初始化一个Git仓库，使用<code>git init</code>命令。</p><p>添加文件到Git仓库，分两步：</p><ol><li>使用命令<code>git add &lt;file&gt;</code>，注意，可反复多次使用，添加多个文件；</li><li>使用命令<code>git commit -m &lt;message&gt;</code>，完成。</li></ol><h2 id="2-版本回退"><a href="#2-版本回退" class="headerlink" title="2-版本回退"></a>2-版本回退</h2><p>现在，你已经学会了修改文件，然后把修改提交到Git版本库，现在，再练习一次，修改readme.txt文件如下：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>然后尝试提交：</p><pre><code>$ git add readme.txt$ git commit -m &quot;append GPL&quot;[master 1094adb] append GPL 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>像这样，你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为<code>commit</code>。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个<code>commit</code>恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>现在，我们回顾一下<code>readme.txt</code>文件一共有几个版本被提交到Git仓库里了：</p><p>版本1：wrote a readme file</p><pre><code>Git is a version control system.Git is free software.</code></pre><p>版本2：add distributed</p><pre><code>Git is a distributed version control system.Git is free software.</code></pre><p>版本3：append GPL</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>当然了，在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用<code>git log</code>命令查看：</p><pre><code>$ git logcommit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:06:15 2018 +0800    append GPLcommit e475afc93c209a690c39c13a46716e8fa000c366Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:03:36 2018 +0800    add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 20:59:18 2018 +0800    wrote a readme file</code></pre><p><code>git log</code>命令显示从最近到最远的提交日志，我们可以看到3次提交，最近的一次是<code>append GPL</code>，上一次是<code>add distributed</code>，最早的一次是<code>wrote a readme file</code>。</p><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<code>--pretty=oneline</code>参数：</p><pre><code>$ git log --pretty=oneline1094adb7b9b3807259d8cb349e7df1d4d6477073 (HEAD -&gt; master) append GPLe475afc93c209a690c39c13a46716e8fa000c366 add distributedeaadf4e385e865d25c48e7ca9c8395c3f7dfaef0 wrote a readme file</code></pre><p>需要友情提示的是，你看到的一大串类似<code>1094adb...</code>的是<code>commit id</code>（版本号），和SVN不一样，Git的<code>commit id</code>不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的<code>commit id</code>和我的肯定不一样，以你自己的为准。为什么<code>commit id</code>需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</p><p>好了，现在我们启动时光穿梭机，准备把<code>readme.txt</code>回退到上一个版本，也就是<code>add distributed</code>的那个版本，怎么做呢？</p><p>首先，Git必须知道当前版本是哪个版本，在Git中，用<code>HEAD</code>表示当前版本，也就是最新的提交<code>1094adb...</code>（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>现在，我们要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p><pre><code>$ git reset --hard HEAD^HEAD is now at e475afc add distributed</code></pre><p><code>--hard</code>参数有啥意义？这个后面再讲，现在你先放心使用。</p><p>看看<code>readme.txt</code>的内容是不是版本<code>add distributed</code>：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software.</code></pre><p>果然被还原了。</p><p>还可以继续回退到上一个版本<code>wrote a readme file</code>，不过且慢，然我们用<code>git log</code>再看看现在版本库的状态：</p><pre><code>$ git logcommit e475afc93c209a690c39c13a46716e8fa000c366 (HEAD -&gt; master)Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 21:03:36 2018 +0800    add distributedcommit eaadf4e385e865d25c48e7ca9c8395c3f7dfaef0Author: Michael Liao &lt;askxuefeng@gmail.com&gt;Date:   Fri May 18 20:59:18 2018 +0800    wrote a readme file</code></pre><p>最新的那个版本<code>append GPL</code>已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？</p><p>办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个<code>append GPL</code>的<code>commit id</code>是<code>1094adb...</code>，于是就可以指定回到未来的某个版本：</p><pre><code>$ git reset --hard 1094aHEAD is now at 83b0afe append GPL</code></pre><p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p><p>再小心翼翼地看看<code>readme.txt</code>的内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.</code></pre><p>果然，我胡汉三又回来了。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>append GPL</code>：</p><pre class="line-numbers language-ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   └──> ○ append GPL        │        ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改为指向<code>add distributed</code>：</p><pre class="line-numbers language-ascii"><code class="language-ascii">┌────┐│HEAD│└────┘   │   │    ○ append GPL   │    │   └──> ○ add distributed        │        ○ wrote a readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺便把工作区的文件更新了。所以你让<code>HEAD</code>指向哪个版本号，你就把当前版本定位在哪。</p><p>现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的。当你用<code>$ git reset --hard HEAD^</code>回退到<code>add distributed</code>版本时，再想恢复到<code>append GPL</code>，就必须找到<code>append GPL</code>的commit id。Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p><pre><code>$ git refloge475afc HEAD@&#123;1&#125;: reset: moving to HEAD^1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPLe475afc HEAD@&#123;3&#125;: commit: add distributedeaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file</code></pre><p>终于舒了口气，从输出可知，<code>append GPL</code>的commit id是<code>1094adb</code>，现在，你又可以乘坐时光机回到未来了。</p><h2 id="3-工作区和暂存区"><a href="#3-工作区和暂存区" class="headerlink" title="3-工作区和暂存区"></a>3-工作区和暂存区</h2><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p>先来看名词解释。</p><h4 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h4><p>就是你在电脑里能看到的目录</p><h4 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h4><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p><img src="https://i.loli.net/2020/10/15/Mp18lNecJQsKHjI.jpg" alt="git-repo"></p><p>分支和<code>HEAD</code>的概念我们以后再讲。</p><p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>俗话说，实践出真知。现在，我们再练习一遍，先对<code>readme.txt</code>做个修改，比如加上一行内容：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.</code></pre><p>然后，在工作区新增一个<code>LICENSE</code>文本文件（内容随便写）。</p><p>先用<code>git status</code>查看一下状态：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txtUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)    LICENSEno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>Git非常清楚地告诉我们，<code>readme.txt</code>被修改了，而<code>LICENSE</code>还从来没有被添加过，所以它的状态是<code>Untracked</code>。</p><p>现在，使用两次命令<code>git add</code>，把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p><pre><code>$ git statusOn branch masterChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    new file:   LICENSE    modified:   readme.txt</code></pre><p>现在，暂存区的状态就变成这样了：</p><p><img src="https://i.loli.net/2020/10/15/AecFl4BPhCZYSNX.jpg" alt="git-stage"></p><p>所以，<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><pre><code>$ git commit -m &quot;understand how stage works&quot;[master e43a48b] understand how stage works 2 files changed, 2 insertions(+) create mode 100644 LICENSE</code></pre><p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：</p><pre><code>$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>现在版本库变成了这样，暂存区就没有任何内容了：</p><p><img src="https://i.loli.net/2020/10/15/K3kMFmlgZtir2cV.jpg" alt="git-stage-after-commit"></p><h2 id="4-管理和修改"><a href="#4-管理和修改" class="headerlink" title="4-管理和修改"></a>4-管理和修改</h2><p>现在，假定你已经完全掌握了暂存区的概念。下面，我们要讨论的就是，为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p><p>你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。</p><p>为什么说Git管理的是修改，而不是文件呢？我们还是做实验。第一步，对readme.txt做一个修改，比如加一行内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes.</code></pre><p>然后，添加：</p><pre><code>$ git add readme.txt$ git status# On branch master# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)##       modified:   readme.txt#</code></pre><p>然后，再修改readme.txt：</p><pre><code>$ cat readme.txt Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.</code></pre><p>提交：</p><pre><code>$ git commit -m &quot;git tracks changes&quot;[master 519219b] git tracks changes 1 file changed, 1 insertion(+)</code></pre><p>提交后，再看看状态：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>咦，怎么第二次的修改没有被提交？</p><p>别激动，我们回顾一下操作过程：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>你看，我们前面讲了，Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>提交后，用<code>git diff HEAD -- readme.txt</code>命令可以查看工作区和版本库里面最新版本的区别：</p><pre><code>$ git diff HEAD -- readme.txt diff --git a/readme.txt b/readme.txtindex 76d770f..a9c5755 100644--- a/readme.txt+++ b/readme.txt@@ -1,4 +1,4 @@ Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage.-Git tracks changes.+Git tracks changes of files.</code></pre><p>可见，第二次修改确实没有被提交。</p><p>那怎么提交第二次修改呢？你可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><p>好，现在，把第二次修改提交了，然后开始小结。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>现在，你又理解了Git是如何跟踪修改的，每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h2 id="5-撤销修改"><a href="#5-撤销修改" class="headerlink" title="5-撤销修改"></a>5-撤销修改</h2><p>自然，你是不会犯错的。不过现在是凌晨两点，你正在赶一份工作报告，你在<code>readme.txt</code>中添加了一行：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.My stupid boss still prefers SVN.</code></pre><p>在你准备提交前，一杯咖啡起了作用，你猛然发现了<code>stupid boss</code>可能会让你丢掉这个月的奖金！</p><p>既然错误发现得很及时，就可以很容易地纠正它。你可以删掉最后一行，手动把文件恢复到上一个版本的状态。如果用<code>git status</code>查看一下：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>你可以发现，Git会告诉你，<code>git checkout -- file</code>可以丢弃工作区的修改：</p><pre><code>$ git checkout -- readme.txt</code></pre><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><p>现在，看看<code>readme.txt</code>的文件内容：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.</code></pre><p>文件内容果然复原了。</p><p><code>git checkout -- file</code>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到<code>git checkout</code>命令。</p><p>现在假定是凌晨3点，你不但写了一些胡话，还<code>git add</code>到暂存区了：</p><pre><code>$ cat readme.txtGit is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.My stupid boss still prefers SVN.$ git add readme.txt</code></pre><p>庆幸的是，在<code>commit</code>之前，你发现了这个问题。用<code>git status</code>查看一下，修改只是添加到了暂存区，还没有提交：</p><pre><code>$ git statusOn branch masterChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    modified:   readme.txt</code></pre><p>Git同样告诉我们，用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><pre><code>$ git reset HEAD readme.txtUnstaged changes after reset:M    readme.txt</code></pre><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p><p>再用<code>git status</code>查看一下，现在暂存区是干净的，工作区有修改：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txt</code></pre><p>还记得如何丢弃工作区的修改吗？</p><pre><code>$ git checkout -- readme.txt$ git statusOn branch masternothing to commit, working tree clean</code></pre><p>整个世界终于清静了！</p><p>现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把<code>stupid boss</code>提交推送到远程版本库，你就真的惨了……</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>又到了小结时间。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h2 id="6-删除文件"><a href="#6-删除文件" class="headerlink" title="6-删除文件"></a>6-删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p><pre><code>$ git add test.txt$ git commit -m &quot;add test.txt&quot;[master b84166e] add test.txt 1 file changed, 1 insertion(+) create mode 100644 test.txt</code></pre><p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p><pre><code>$ rm test.txt</code></pre><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p><pre><code>$ git statusOn branch masterChanges not staged for commit:  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    deleted:    test.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p><pre><code>$ git rm test.txtrm &#39;test.txt&#39;$ git commit -m &quot;remove test.txt&quot;[master d46f35e] remove test.txt 1 file changed, 1 deletion(-) delete mode 100644 test.txt</code></pre><p>现在，文件就从版本库中被删除了。</p><p> 小提示：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。</p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><pre><code>$ git checkout -- test.txt</code></pre><p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p> 注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！</p><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>命令<code>git rm</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失<strong>最近一次提交后你修改的内容</strong>。</p><h2 id="7-添加远程库"><a href="#7-添加远程库" class="headerlink" title="7-添加远程库"></a>7-添加远程库</h2><h3 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h3><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！</p><h2 id="8-从远程库克隆"><a href="#8-从远程库克隆" class="headerlink" title="8-从远程库克隆"></a>8-从远程库克隆</h2><p>如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。</p><p>你也许还注意到，GitHub给出的地址不止一个，还可以用<code>https://github.com/michaelliao/gitskills.git</code>这样的地址。实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p><p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p><h3 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h3><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</p><p>Git支持多种协议，包括<code>https</code>，但<code>ssh</code>协议速度最快。</p><h2 id="9-创建与合并分支"><a href="#9-创建与合并分支" class="headerlink" title="9-创建与合并分支"></a>9-创建与合并分支</h2><p>在<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。<code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://i.loli.net/2020/10/15/ID94MGlu8Yw63Bm.jpg" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="https://i.loli.net/2020/10/15/YhKEdBZJ34NQcuX.jpg" alt="git-br-create"></p><p>你看，Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="https://i.loli.net/2020/10/15/fegXCokN5F2IGrL.jpg" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="https://i.loli.net/2020/10/15/GfUBsLpFlROmjMX.jpg" alt="git-br-ff-merge"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p><p><img src="https://i.loli.net/2020/10/15/TfcLz3EDmGRVZsY.jpg" alt="git-br-rm"></p><p>真是太神奇了，你看得出来有些提交是通过分支完成的吗？</p><p>下面开始实战。</p><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><pre><code>$ git checkout -b devSwitched to a new branch &#39;dev&#39;</code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre><code>$ git branch dev$ git checkout devSwitched to branch &#39;dev&#39;</code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p><pre><code>$ git branch* dev  master</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p><pre><code>Creating a new branch is quick.</code></pre><p>然后提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;branch test&quot;[dev b17d20e] branch test 1 file changed, 1 insertion(+)</code></pre><p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p><pre><code>$ git checkout masterSwitched to branch &#39;master&#39;</code></pre><p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p><p><img src="https://i.loli.net/2020/10/15/Wz2rLy8AZ7kYV3s.jpg" alt="git-br-on-master"></p><p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><pre><code>$ git merge devUpdating d46f35e..b17d20eFast-forward readme.txt | 1 + 1 file changed, 1 insertion(+)</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p><p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p><p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p><pre><code>$ git branch -d devDeleted branch dev (was b17d20e).</code></pre><p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p><pre><code>$ git branch* master</code></pre><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p><p>创建并切换到新的<code>dev</code>分支，可以使用：</p><pre><code>$ git switch -c dev</code></pre><p>直接切换到已有的<code>master</code>分支，可以使用：</p><pre><code>$ git switch master</code></pre><p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p><h3 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h3><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="10-解决冲突"><a href="#10-解决冲突" class="headerlink" title="10-解决冲突"></a>10-解决冲突</h2><p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p><pre><code>$ git switch -c feature1Switched to a new branch &#39;feature1&#39;</code></pre><p>修改<code>readme.txt</code>最后一行，改为：</p><pre><code>Creating a new branch is quick AND simple.</code></pre><p>在<code>feature1</code>分支上提交：</p><pre><code>$ git add readme.txt$ git commit -m &quot;AND simple&quot;[feature1 14096d0] AND simple 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>切换到<code>master</code>分支：</p><pre><code>$ git switch masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin/master&#39; by 1 commit.  (use &quot;git push&quot; to publish your local commits)</code></pre><p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p><p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p><pre><code>Creating a new branch is quick &amp; simple.</code></pre><p>提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;&amp; simple&quot;[master 5dc6824] &amp; simple 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p><p><img src="https://i.loli.net/2020/10/15/OLmvDt5QP37Tek6.jpg" alt="git-br-feature1"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><pre><code>$ git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in readme.txtAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><pre><code>$ git statusOn branch masterYour branch is ahead of &#39;origin/master&#39; by 2 commits.  (use &quot;git push&quot; to publish your local commits)You have unmerged paths.  (fix conflicts and run &quot;git commit&quot;)  (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths:  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)    both modified:   readme.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre><p>我们可以直接查看readme.txt的内容：</p><pre><code>Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.=======Creating a new branch is quick AND simple.&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</code></pre><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p><pre><code>Creating a new branch is quick and simple.</code></pre><p>再提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;conflict fixed&quot;[master cf810e4] conflict fixed</code></pre><p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p><p><img src="https://i.loli.net/2020/10/15/MvawG94RPXNOhBV.jpg" alt="git-br-conflict-merged"></p><p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   cf810e4 (HEAD -&gt; master) conflict fixed|\  | * 14096d0 (feature1) AND simple* | 5dc6824 &amp; simple|/  * b17d20e branch test* d46f35e (origin/master) remove test.txt* b84166e add test.txt* 519219b git tracks changes* e43a48b understand how stage works* 1094adb append GPL* e475afc add distributed* eaadf4e wrote a readme file</code></pre><p>最后，删除<code>feature1</code>分支：</p><pre><code>$ git branch -d feature1Deleted branch feature1 (was 14096d0).</code></pre><p>工作完成。</p><h3 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h3><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>用<code>git log --graph</code>命令可以看到分支合并图。</p><h2 id="11-分支管理策略"><a href="#11-分支管理策略" class="headerlink" title="11-分支管理策略"></a>11-分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p><p>首先，仍然创建并切换<code>dev</code>分支：</p><pre><code>$ git switch -c devSwitched to a new branch &#39;dev&#39;</code></pre><p>修改readme.txt文件，并提交一个新的commit：</p><pre><code>$ git add readme.txt $ git commit -m &quot;add merge&quot;[dev f52c633] add merge 1 file changed, 1 insertion(+)</code></pre><p>现在，我们切换回<code>master</code>：</p><pre><code>$ git switch masterSwitched to branch &#39;master&#39;</code></pre><p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p><pre><code>$ git merge --no-ff -m &quot;merge with no-ff&quot; devMerge made by the &#39;recursive&#39; strategy. readme.txt | 1 + 1 file changed, 1 insertion(+)</code></pre><p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p><p>合并后，我们用<code>git log</code>看看分支历史：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   e1e9c68 (HEAD -&gt; master) merge with no-ff|\  | * f52c633 (dev) add merge|/  *   cf810e4 conflict fixed...</code></pre><p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p><p><img src="https://i.loli.net/2020/10/15/qicatLFATO56zrh.jpg" alt="git-no-ff-mode"></p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://i.loli.net/2020/10/15/saThFdBUkK91gyb.jpg" alt="git-br-policy"></p><h3 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h3><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p><h2 id="12-Bug分支"><a href="#12-Bug分支" class="headerlink" title="12-Bug分支"></a>12-Bug分支</h2><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p><pre><code>$ git statusOn branch devChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    new file:   hello.pyChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txt</code></pre><p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><pre><code>$ git stashSaved working directory and index state WIP on dev: f52c633 add merge</code></pre><p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><pre><code>$ git checkout masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin/master&#39; by 6 commits.  (use &quot;git push&quot; to publish your local commits)$ git checkout -b issue-101Switched to a new branch &#39;issue-101&#39;</code></pre><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><pre><code>$ git add readme.txt $ git commit -m &quot;fix bug 101&quot;[issue-101 4c805e2] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p><pre><code>$ git switch masterSwitched to branch &#39;master&#39;Your branch is ahead of &#39;origin/master&#39; by 6 commits.  (use &quot;git push&quot; to publish your local commits)$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101Merge made by the &#39;recursive&#39; strategy. readme.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p><pre><code>$ git switch devSwitched to branch &#39;dev&#39;$ git statusOn branch devnothing to commit, working tree clean</code></pre><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p><pre><code>$ git stash liststash@&#123;0&#125;: WIP on dev: f52c633 add merge</code></pre><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><pre><code>$ git stash popOn branch devChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    new file:   hello.pyChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    modified:   readme.txtDropped refs/stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</code></pre><p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p><pre><code>$ git stash list</code></pre><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><pre><code>$ git stash apply stash@&#123;0&#125;</code></pre><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p><p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p><p>有木有更简单的方法？</p><p>有！</p><p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p><pre><code>$ git branch* dev  master$ git cherry-pick 4c805e2[master 1d4b803] fix bug 101 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><p>有些聪明的童鞋会想了，既然可以在master分支上修复bug后，在dev分支上可以“重放”这个修复过程，那么直接在dev分支上修复bug，然后在master分支上“重放”行不行？当然可以，不过你仍然需要<code>git stash</code>命令保存现场，才能从dev分支切换到master分支。</p><h3 id="小结-9"><a href="#小结-9" class="headerlink" title="小结"></a>小结</h3><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p><p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h2 id="13-Feature分支"><a href="#13-Feature分支" class="headerlink" title="13-Feature分支"></a>13-Feature分支</h2><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><pre><code>$ git switch -c feature-vulcanSwitched to a new branch &#39;feature-vulcan&#39;</code></pre><p>5分钟后，开发完毕：</p><pre><code>$ git add vulcan.py$ git statusOn branch feature-vulcanChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    new file:   vulcan.py$ git commit -m &quot;add feature vulcan&quot;[feature-vulcan 287773e] add feature vulcan 1 file changed, 2 insertions(+) create mode 100644 vulcan.py</code></pre><p>切回<code>dev</code>，准备合并：</p><pre><code>$ git switch dev</code></pre><p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p><p>但是！</p><p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p><p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><pre><code>$ git branch -d feature-vulcanerror: The branch &#39;feature-vulcan&#39; is not fully merged.If you are sure you want to delete it, run &#39;git branch -D feature-vulcan&#39;.</code></pre><p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p><p>现在我们强行删除：</p><pre><code>$ git branch -D feature-vulcanDeleted branch feature-vulcan (was 287773e).</code></pre><p>终于删除成功！</p><h3 id="小结-10"><a href="#小结-10" class="headerlink" title="小结"></a>小结</h3><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h2 id="14-多人协作"><a href="#14-多人协作" class="headerlink" title="14-多人协作"></a>14-多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>：</p><pre><code>$ git remoteorigin</code></pre><p>或者，用<code>git remote -v</code>显示更详细的信息：</p><pre><code>$ git remote -vorigin  git@github.com:michaelliao/learngit.git (fetch)origin  git@github.com:michaelliao/learngit.git (push)</code></pre><p>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p><pre><code>$ git push origin master</code></pre><p>如果要推送其他分支，比如<code>dev</code>，就改成：</p><pre><code>$ git push origin dev</code></pre><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p>总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！</p><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆：</p><pre><code>$ git clone git@github.com:michaelliao/learngit.gitCloning into &#39;learngit&#39;...remote: Counting objects: 40, done.remote: Compressing objects: 100% (21/21), done.remote: Total 40 (delta 14), reused 40 (delta 14), pack-reused 0Receiving objects: 100% (40/40), done.Resolving deltas: 100% (14/14), done.</code></pre><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。不信可以用<code>git branch</code>命令看看：</p><pre><code>$ git branch* master</code></pre><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><pre><code>$ git checkout -b dev origin/dev</code></pre><p>现在，他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程：</p><pre><code>$ git add env.txt$ git commit -m &quot;add env&quot;[dev 7a5e5dd] add env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devCounting objects: 3, done.Delta compression using up to 4 threads.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 308 bytes | 308.00 KiB/s, done.Total 3 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   f52c633..7a5e5dd  dev -&gt; dev</code></pre><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p><pre><code>$ cat env.txtenv$ git add env.txt$ git commit -m &quot;add new env&quot;[dev 7bd91f1] add new env 1 file changed, 1 insertion(+) create mode 100644 env.txt$ git push origin devTo github.com:michaelliao/learngit.git ! [rejected]        dev -&gt; dev (non-fast-forward)error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p><pre><code>$ git pullThere is no tracking information for the current branch.Please specify which branch you want to merge with.See git-pull(1) for details.    git pull &lt;remote&gt; &lt;branch&gt;If you wish to set tracking information for this branch you can do so with:    git branch --set-upstream-to=origin/&lt;branch&gt; dev</code></pre><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><pre><code>$ git branch --set-upstream-to=origin/dev devBranch &#39;dev&#39; set up to track remote branch &#39;dev&#39; from &#39;origin&#39;.</code></pre><p>再pull：</p><pre><code>$ git pullAuto-merging env.txtCONFLICT (add/add): Merge conflict in env.txtAutomatic merge failed; fix conflicts and then commit the result.</code></pre><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="http://www.liaoxuefeng.com/wiki/896043488029600/900004111093344">解决冲突</a>完全一样。解决后，提交，再push：</p><pre><code>$ git commit -m &quot;fix env conflict&quot;[dev 57c53ab] fix env conflict$ git push origin devCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (4/4), done.Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.Total 6 (delta 0), reused 0 (delta 0)To github.com:michaelliao/learngit.git   7a5e5dd..57c53ab  dev -&gt; dev</code></pre><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="小结-11"><a href="#小结-11" class="headerlink" title="小结"></a>小结</h3><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h2 id="15-Rebase"><a href="#15-Rebase" class="headerlink" title="15-Rebase"></a>15-Rebase</h2><p>在上一节我们看到了，多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p><p>每次合并再push后，分支变成了这样：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit* d1be385 (HEAD -&gt; master, origin/master) init hello*   e5e69f1 Merge branch &#39;dev&#39;|\  | *   57c53ab (origin/dev, dev) fix env conflict| |\  | | * 7a5e5dd add env| * | 7bd91f1 add new env| |/  * |   12a631b merged bug fix 101|\ \  | * | 4c805e2 fix bug 101|/ /  * |   e1e9c68 merge with no-ff|\ \  | |/  | * f52c633 add merge|/  *   cf810e4 conflict fixed</code></pre><p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p><p>其实是可以做到的！</p><p>Git有一种称为rebase的操作，有人把它翻译成“变基”。</p><p><img src="https://i.loli.net/2020/10/15/gZiaD28LOYJ5Cyh.jpg" alt="rebase"></p><p>先不要随意展开想象。我们还是从实际问题出发，看看怎么把分叉的提交变成直线。</p><p>在和远程分支同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit* 582d922 (HEAD -&gt; master) add author* 8875536 add comment* d1be385 (origin/master) init hello*   e5e69f1 Merge branch &#39;dev&#39;|\  | *   57c53ab (origin/dev, dev) fix env conflict| |\  | | * 7a5e5dd add env| * | 7bd91f1 add new env...</code></pre><p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p><p>现在我们尝试推送本地分支：</p><pre><code>$ git push origin masterTo github.com:michaelliao/learngit.git ! [rejected]        master -&gt; master (fetch first)error: failed to push some refs to &#39;git@github.com:michaelliao/learngit.git&#39;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre><p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p><pre><code>$ git pullremote: Counting objects: 3, done.remote: Compressing objects: 100% (1/1), done.remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:michaelliao/learngit   d1be385..f005ed4  master     -&gt; origin/master * [new tag]         v1.0       -&gt; v1.0Auto-merging hello.pyMerge made by the &#39;recursive&#39; strategy. hello.py | 1 + 1 file changed, 1 insertion(+)</code></pre><p>再用<code>git status</code>看看状态：</p><pre><code>$ git statusOn branch masterYour branch is ahead of &#39;origin/master&#39; by 3 commits.  (use &quot;git push&quot; to publish your local commits)nothing to commit, working tree clean</code></pre><p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p><p>用<code>git log</code>看看：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit*   e0ea545 (HEAD -&gt; master) Merge branch &#39;master&#39; of github.com:michaelliao/learngit|\  | * f005ed4 (origin/master) set exit=1* | 582d922 add author* | 8875536 add comment|/  * d1be385 init hello...</code></pre><p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p><p>有！</p><p>什么问题？</p><p>不好看！</p><p>有没有解决方法？</p><p>有！</p><p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p><pre><code>$ git rebaseFirst, rewinding head to replay your work on top of it...Applying: add commentUsing index info to reconstruct a base tree...M    hello.pyFalling back to patching base and 3-way merge...Auto-merging hello.pyApplying: add authorUsing index info to reconstruct a base tree...M    hello.pyFalling back to patching base and 3-way merge...Auto-merging hello.py</code></pre><p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit* 7e61ed4 (HEAD -&gt; master) add author* 3611cfe add comment* f005ed4 (origin/master) set exit=1* d1be385 init hello...</code></pre><p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><p>最后，通过push操作把本地分支推送到远程：</p><pre><code>Mac:~/learngit michael$ git push origin masterCounting objects: 6, done.Delta compression using up to 4 threads.Compressing objects: 100% (5/5), done.Writing objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.Total 6 (delta 2), reused 0 (delta 0)remote: Resolving deltas: 100% (2/2), completed with 1 local object.To github.com:michaelliao/learngit.git   f005ed4..7e61ed4  master -&gt; master</code></pre><p>再用<code>git log</code>看看效果：</p><pre><code>$ git log --graph --pretty=oneline --abbrev-commit* 7e61ed4 (HEAD -&gt; master, origin/master) add author* 3611cfe add comment* f005ed4 set exit=1* d1be385 init hello...</code></pre><p>远程分支的提交历史也是一条直线。</p><h3 id="小结-12"><a href="#小结-12" class="headerlink" title="小结"></a>小结</h3><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea中git使用ssh的url后push报错</title>
      <link href="2020/10/15/idea-zhong-git-shi-yong-ssh-de-url-hou-push-bao-cuo/"/>
      <url>2020/10/15/idea-zhong-git-shi-yong-ssh-de-url-hou-push-bao-cuo/</url>
      
        <content type="html"><![CDATA[<h2 id="idea中git使用ssh的url后push报错"><a href="#idea中git使用ssh的url后push报错" class="headerlink" title="idea中git使用ssh的url后push报错"></a>idea中git使用ssh的url后push报错</h2><h3 id="开发环境：Mac11-0、idea2019-2、-git-2-24-3-Apple-Git-128"><a href="#开发环境：Mac11-0、idea2019-2、-git-2-24-3-Apple-Git-128" class="headerlink" title="开发环境：Mac11.0、idea2019.2、 git 2.24.3 (Apple Git-128)"></a>开发环境：Mac11.0、idea2019.2、 git 2.24.3 (Apple Git-128)</h3><h3 id="1-报错代码"><a href="#1-报错代码" class="headerlink" title="1.报错代码"></a>1.报错代码</h3><pre><code>Please make sure you have the correct access rightsand the repository exists.sunyun@sunyundeMBP ch009-springboot-ems % git remote add origin git@gitee.com:fejxc/spring-boot-page-help.gitfatal: remote origin already exists.sunyun@sunyundeMBP ch009-springboot-ems % git push -u origin mastergit@gitee.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.sunyun@sunyundeMBP ch009-springboot-ems % git statusOn branch masternothing to commit, working tree clean</code></pre><h3 id="2-解决办法，在git上或者gitee上添加SSH公钥"><a href="#2-解决办法，在git上或者gitee上添加SSH公钥" class="headerlink" title="2.解决办法，在git上或者gitee上添加SSH公钥"></a>2.解决办法，在git上或者gitee上添加SSH公钥</h3><p>1)输入代码生成ssh公匙</p><p><code> ssh-keygen -t rsa -C &quot;输入你的github或者gitee的用户名&quot;</code></p><p><img src="https://i.loli.net/2020/10/15/lWu4BtRZnCz8eTU.png"></p><p>2)ssh公匙会在你的计算机用户名文件下</p><p><img src="https://i.loli.net/2020/10/15/wkJmXEKMlC7q6zg.png"></p><p>3)用文本编辑打开id_rsa.pub，复制里面的内容</p><p><img src="https://i.loli.net/2020/10/15/uKZ27dsnchQjCpO.png"></p><p>4)在github或者gitee上点自己头像设置，然后找到安全设置里的ssh公匙，添加刚刚生成的肤质的内容</p><p><img src="https://i.loli.net/2020/10/15/gPYHCjoDAcm84tN.png"></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中使用pagehelp实现分页</title>
      <link href="2020/10/14/springboot-zhong-shi-yong-pagehelp-shi-xian-fen-ye/"/>
      <url>2020/10/14/springboot-zhong-shi-yong-pagehelp-shi-xian-fen-ye/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot中使用pagehelp实现分页"><a href="#SpringBoot中使用pagehelp实现分页" class="headerlink" title="SpringBoot中使用pagehelp实现分页"></a>SpringBoot中使用pagehelp实现分页</h2><h3 id="1-在pom-xml中添加依赖"><a href="#1-在pom-xml中添加依赖" class="headerlink" title="1.在pom.xml中添加依赖"></a>1.在pom.xml中添加依赖</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-在application-properties中添加设置信息"><a href="#2-在application-properties中添加设置信息" class="headerlink" title="2.在application.properties中添加设置信息"></a>2.在application.properties中添加设置信息</h3><pre class="line-numbers language-java"><code class="language-java">#pagehelper#配置helperDialect属性来指定分页插件使用哪种数据库pagehelper<span class="token punctuation">.</span>helperDialect<span class="token operator">=</span>MySQL#分页合理化参数，默认值为<span class="token boolean">false</span>。当该参数设置为 <span class="token boolean">true</span> 时，pageNum<span class="token operator">&lt;=</span><span class="token number">0</span> 时会查询第一页， pageNum<span class="token operator">></span>pages（超过总数时），会查询最后一页。默认<span class="token boolean">false</span> 时，直接根据参数进行查询pagehelper<span class="token punctuation">.</span>reasonable<span class="token operator">=</span><span class="token boolean">false</span>#支持通过 Mapper 接口参数来传递分页参数，默认值<span class="token boolean">false</span>，分页插件会从查询方法的参数值中，自动根据上面 params 配置的字段中取值，查找到合适的值时就会自动分页pagehelper<span class="token punctuation">.</span>supportMethodsArguments<span class="token operator">=</span><span class="token boolean">false</span>pagehelper<span class="token punctuation">.</span>params<span class="token operator">=</span>count<span class="token operator">=</span>countSql#默认值为 <span class="token boolean">false</span>，该参数对使用 RowBounds 作为分页参数时有效。 当该参数设置为 <span class="token boolean">true</span> 时，会将 RowBounds 中的 offset 参数当成 pageNum 使用，可以用页码和页面大小两个参数进行分页pagehelper<span class="token punctuation">.</span>offsetAsPageNum<span class="token operator">=</span><span class="token boolean">true</span>#默认值为 <span class="token boolean">false</span>，当该参数设置为 <span class="token boolean">true</span> 时，如果 pageSize<span class="token operator">=</span><span class="token number">0</span> 或者 RowBounds<span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">0</span> 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）pagehelper<span class="token punctuation">.</span>pageSizeZero<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在controller中编写代码"><a href="#3-在controller中编写代码" class="headerlink" title="3.在controller中编写代码"></a>3.在controller中编写代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/findAll"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">listCategory</span><span class="token punctuation">(</span>Model m <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token keyword">int</span> start<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"size"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    PageInfo pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>empService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pageInfo"</span><span class="token punctuation">,</span> pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ems/emplist"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-在前端界面实现"><a href="#4-在前端界面实现" class="headerlink" title="4.在前端界面实现"></a>4.在前端界面实现</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>row1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item:$&amp;#123;pageInfo.list&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;item.id&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;item.name&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;item.salary&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;item.age&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!--日期格式化--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;item.bir&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/emp/delete(id<span class="token punctuation">=</span>$&amp;#123;item.id&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/emp/find(id<span class="token punctuation">=</span>$&amp;#123;item.id&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>添加员工<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>location.href<span class="token punctuation">=</span><span class="token punctuation">'</span>/ems/toSave<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;findAll?start<span class="token punctuation">=</span>1&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[首页]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;not pageInfo.isFirstPage&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;findAll(start<span class="token punctuation">=</span>$&amp;#123;pageInfo.pageNum-1&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[上页]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;not pageInfo.isIsLastPage()&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;findAll(start<span class="token punctuation">=</span>$&amp;#123;pageInfo.pageNum+1&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[下页]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;findAll(start<span class="token punctuation">=</span>$&amp;#123;pageInfo.pages&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[末页]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                当前页/总页数: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;pageInfo.pageNum&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/findAll(start<span class="token punctuation">=</span>$&amp;#123;pageInfo.pageNum&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                /<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$&amp;#123;pageInfo.pages&amp;#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@&amp;#123;/findAll(start<span class="token punctuation">=</span>$&amp;#123;pageInfo.pages&amp;#125;)&amp;#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-实现效果"><a href="#5-实现效果" class="headerlink" title="5.实现效果"></a>5.实现效果</h3><p><img src="https://i.loli.net/2020/10/14/mZzBelca3fVPN5w.png" alt="分页效果"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pagerhelp分页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理第二章课后作业</title>
      <link href="2020/10/13/gen-ju-zheng-gui-shi-gou-zao-bu-que-ding-you-xian-ji-nfa/"/>
      <url>2020/10/13/gen-ju-zheng-gui-shi-gou-zao-bu-que-ding-you-xian-ji-nfa/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理第二章课后作业"><a href="#编译原理第二章课后作业" class="headerlink" title="编译原理第二章课后作业"></a>编译原理第二章课后作业</h1><h2 id="习题2-7"><a href="#习题2-7" class="headerlink" title="习题2.7"></a>习题2.7</h2><h3 id="课本教材：编译原理（第二版）陈意云"><a href="#课本教材：编译原理（第二版）陈意云" class="headerlink" title="课本教材：编译原理（第二版）陈意云"></a>课本教材：编译原理（第二版）陈意云</h3><h3 id="算法2-4-从正规式构造NFA"><a href="#算法2-4-从正规式构造NFA" class="headerlink" title="算法2.4 从正规式构造NFA"></a>算法2.4 从正规式构造NFA</h3><h4 id="1-NFA的性质"><a href="#1-NFA的性质" class="headerlink" title="1-NFA的性质"></a>1-NFA的性质</h4><ol><li>只有一个终止状态</li><li>没有边进入开始状态</li><li>没有边离开终止状态</li></ol><p><img src="https://i.loli.net/2020/10/13/GXTQ7F2bHodckCU.png"></p><p><img src="https://i.loli.net/2020/10/13/IecRxOwpEJHhdMP.png"></p><h4 id="2-小总结"><a href="#2-小总结" class="headerlink" title="2-小总结"></a>2-小总结</h4><ol><li>｜状态合并的时候会添加新的开始状态和结束状态</li><li>‘*‘ （星闭包运算）状态合并的时候会添加新的开始状态和结束状态</li><li>连接运算的时候要进行状态合并</li></ol><h4 id="3-习题"><a href="#3-习题" class="headerlink" title="3-习题"></a>3-习题</h4><p><img src="https://i.loli.net/2020/10/13/Ws35zo1Tjyl6APh.png" alt="习题2.7"></p><p><img src="https://i.loli.net/2020/10/13/SwQrVkhe7gUPdc9.png" alt="习题2.7"></p><h4 id="习题答案"><a href="#习题答案" class="headerlink" title="习题答案"></a>习题答案</h4><h4 id="a"><a href="#a" class="headerlink" title="(a)"></a>(a)</h4><p><img src="https://i.loli.net/2020/10/17/SnEfGtZlKbCuqNy.jpg"></p><h4 id="b"><a href="#b" class="headerlink" title="(b)"></a>(b)</h4><p><img src="https://i.loli.net/2020/10/17/lGEQYn8Hs6bkwO2.jpg"></p><h4 id="c"><a href="#c" class="headerlink" title="(c)"></a>(c)</h4><p><img src="https://i.loli.net/2020/10/17/TbuijE3yx94zmNC.jpg"></p><h4 id="d"><a href="#d" class="headerlink" title="(d)"></a>(d)</h4><p><img src="https://i.loli.net/2020/10/17/qB6wacyxR1UskZe.jpg"></p><h2 id="习题2-3"><a href="#习题2-3" class="headerlink" title="习题2.3"></a>习题2.3</h2><p><img src="https://i.loli.net/2020/11/02/MjxleIiHuPza2GA.png" alt="习题2.3"></p><h2 id="习题2-4"><a href="#习题2-4" class="headerlink" title="习题2.4"></a>习题2.4</h2><p><img src="https://i.loli.net/2020/11/02/PoslebBKV2dR6EC.png" alt="习题2.4"></p><h2 id="习题2-12"><a href="#习题2-12" class="headerlink" title="习题2.12"></a>习题2.12</h2><p><img src="https://i.loli.net/2020/11/02/Ngyh3IHLczp1uMf.png" alt="习题2.12"></p><p><img src="https://i.loli.net/2020/11/02/rtSsRF4G8hvYipE.png" alt="习题2.12"></p><h2 id="习题2-13"><a href="#习题2-13" class="headerlink" title="习题2.13"></a>习题2.13</h2><p><img src="https://i.loli.net/2020/11/02/KqMtJ3IZDTYdP95.png" alt="习题2.13"></p><blockquote><p>[]如果答案有误，请联系qq<code>1031364436</code>  电话☎️<code>18720328626</code></p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pageHelp的pageSize属性不生效解决方案</title>
      <link href="2020/10/12/pagehelp-de-pagesize-shu-xing-bu-sheng-xiao-jie-jue-fang-an/"/>
      <url>2020/10/12/pagehelp-de-pagesize-shu-xing-bu-sheng-xiao-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="踩坑记录：pageHelp的pageSize属性不生效解决方案"><a href="#踩坑记录：pageHelp的pageSize属性不生效解决方案" class="headerlink" title="踩坑记录：pageHelp的pageSize属性不生效解决方案"></a>踩坑记录：pageHelp的pageSize属性不生效解决方案</h1><h3 id="开发环境："><a href="#开发环境：" class="headerlink" title="开发环境："></a>开发环境：</h3><p>当前环境说明：<br>开发工具：idea2019.2 Mac 11.0<br>框架：springboot、mybatis<br>功能：采用springboot整合mybatis实现对查询到的数据进行分页显示</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>pagesize属性不生效</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> String <span class="token function">listCategory</span><span class="token punctuation">(</span>Model m <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token keyword">int</span> start<span class="token punctuation">,</span>                               <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"size"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"5"</span><span class="token punctuation">)</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>size<span class="token punctuation">,</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> cs <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PageInfo<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>size=5</code> 按效果数据每页会显示5条数据</p><img src="https://i.loli.net/2020/10/12/J6tE3xib45lNpA9.png" alt="分页没有生效" style="zoom: 50%;" /><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>打开pom.xml文件</p><p>修改当前pagehelper的版本</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">5.2</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>5.2.0</code> 最新版本，分页不生效</p><p>换成<code>4.1.6</code> 即可</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>            <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>github<span class="token punctuation">.</span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>pagehelper<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>            <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">6</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证结果："><a href="#验证结果：" class="headerlink" title="验证结果："></a>验证结果：</h3><p><img src="https://i.loli.net/2020/10/12/RuzMyhqnlW9Trbm.png" alt="正确结果"></p><h3 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h3><p>一定要注意依赖的版本之间的对应关系！</p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven配置阿里云镜像</title>
      <link href="2020/10/10/maven-pei-zhi-a-li-yun-jing-xiang/"/>
      <url>2020/10/10/maven-pei-zhi-a-li-yun-jing-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="maven配置阿里云镜像"><a href="#maven配置阿里云镜像" class="headerlink" title="maven配置阿里云镜像"></a>maven配置阿里云镜像</h1><h3 id="1-修改setting-xml文件"><a href="#1-修改setting-xml文件" class="headerlink" title="1.修改setting.xml文件"></a>1.修改setting.xml文件</h3><p><img src="https://i.loli.net/2020/10/10/Ev4brcCtsiV9URG.png"></p><p>文件在maven解压后的conf文件夹中</p><h3 id="2-在mirrors标签中加入代码"><a href="#2-在mirrors标签中加入代码" class="headerlink" title="2.在mirrors标签中加入代码"></a>2.在mirrors标签中加入代码</h3><pre><code>  &lt;mirror&gt;    &lt;id&gt;alimaven&lt;/id&gt;    &lt;name&gt;aliyun maven&lt;/name&gt;    &lt;url&gt;https://maven.aliyun.com/repository/central/&lt;/url&gt;    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;mirror&gt;</code></pre><p><img src="https://i.loli.net/2020/10/10/Wvoxesyi9MP7f5h.png"></p><p>保存退出</p><h3 id="3-在idea中修改配置"><a href="#3-在idea中修改配置" class="headerlink" title="3.在idea中修改配置"></a>3.在idea中修改配置</h3><p>1.点击IntelliJ IDEA 选择 Prefernces</p><p><img src="https://i.loli.net/2020/10/10/su5MGtedoPcybSp.png"></p><p>2.Maven home directory 中选择你解压maven文件的路径</p><p>   User settings file 选择 maven文件夹中conf文件下的settings.xml</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置教程 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac配置Maven</title>
      <link href="2020/10/10/mac-pei-zhi-maven/"/>
      <url>2020/10/10/mac-pei-zhi-maven/</url>
      
        <content type="html"><![CDATA[<h1 id="mac配置Maven"><a href="#mac配置Maven" class="headerlink" title="mac配置Maven"></a>mac配置Maven</h1><h3 id="1-下载Maven"><a href="#1-下载Maven" class="headerlink" title="1.下载Maven"></a>1.下载Maven</h3><p><a href="https://maven.apache.org/download.cgi#previous-releases">https://maven.apache.org/download.cgi#previous-releases</a></p><p><img src="https://i.loli.net/2020/10/10/hoeBp35WAyNaE4P.png"></p><p>下载后，解压到自己喜欢放的位置，我放在了文稿里头。</p><p><img src="https://i.loli.net/2020/10/10/PSuoU4K2kXF178H.png"></p><h3 id="2-编辑终端的配置文件"><a href="#2-编辑终端的配置文件" class="headerlink" title="2.编辑终端的配置文件"></a>2.编辑终端的配置文件</h3><pre class="line-numbers language-java"><code class="language-java">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://i.loli.net/2020/10/10/hp3QcqRK9rlSbLY.png"></p><p>选择E</p><p>然后添加如下代码：</p><pre class="line-numbers language-export"><code class="language-export">export M2_HOME=/Users/sunyun/Documents/apache-maven-3.6.3export PATH=$PATH:$M2_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>/Users/sunyun/Documents/apache-maven-3.6.3</code>换成你自己刚刚解压放的路径</p><p><img src="https://i.loli.net/2020/10/10/RQE5LqWPJm4vOzI.png"></p><h3 id="3-保存文件，执行命令使之生效"><a href="#3-保存文件，执行命令使之生效" class="headerlink" title="3.保存文件，执行命令使之生效"></a>3.保存文件，执行命令使之生效</h3><pre><code>source ~/.bash_profile</code></pre><h3 id="4-验证是否配置成功"><a href="#4-验证是否配置成功" class="headerlink" title="4.验证是否配置成功"></a>4.验证是否配置成功</h3><p>终端输入：</p><pre><code>mvn -v</code></pre><p><img src="https://i.loli.net/2020/10/10/jtSVhIAZN4Tb7d1.png"></p><p>出现以上的图片就说明配置成功！</p>]]></content>
      
      
      <categories>
          
          <category> mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置教程 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 hexo d 发布 git not found.md</title>
      <link href="2020/10/07/jie-jue-hexo-d-fa-bu-git-not-found/"/>
      <url>2020/10/07/jie-jue-hexo-d-fa-bu-git-not-found/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="$ hexo d"></a>$ hexo d</h2><h2 id="ERROR-Deployer-not-found-git"><a href="#ERROR-Deployer-not-found-git" class="headerlink" title="ERROR Deployer not found: git"></a>ERROR Deployer not found: git</h2><p><img src="https://i.loli.net/2020/10/07/Uvl2BdoCEst5gjf.png" alt="hexo d 报错"></p><p><code>npm install -- save hexo-deployer-git</code></p><p><img src="https://i.loli.net/2020/10/07/XVSMwjoNl6C8RQD.png" alt="解决方法"></p>]]></content>
      
      
      <categories>
          
          <category> Bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑记录 </tag>
            
            <tag> hexo-bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理复习总结</title>
      <link href="2020/10/07/bian-yi-yuan-li-fu-xi-zong-jie/"/>
      <url>2020/10/07/bian-yi-yuan-li-fu-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编译器概述"><a href="#一、编译器概述" class="headerlink" title="一、编译器概述"></a>一、编译器概述</h2><h3 id="1、名词解释"><a href="#1、名词解释" class="headerlink" title="1、名词解释"></a>1、名词解释</h3><p>1.1解释下列名词</p><p>源语言：被翻译器翻译的语言，用于书写源程序的语言。<br>目标语言：被翻译器翻译之后得到的语言，用于书写目标程序的语言<br>翻译器：能够完成从一种语言到另一种语言的变换的软件<br>编译器：一种特殊的翻译器，要求目标语言比源语言低级<br>解释器：解释器是不同于编译器的另一种语言处理器。解释器不像编译器那样通过翻译来生成目标程序，而是直接执行源程序所指定的运算。</p><h3 id="2、编译阶段"><a href="#2、编译阶段" class="headerlink" title="2、编译阶段"></a>2、编译阶段</h3><p>1.2典型的编译器可以划分成几个主要的逻辑阶段？各阶段的主要功能是什么？<br>典型的编译器可以划分成七个主要的逻辑阶段，分别是<strong>词法分析器、语法分析器、语义分析器、中间代码生成器、独立于机器的代码优化器、代码生成器、依赖于机器的代码优化器</strong>。各阶段的主要功能：</p><p>（1）词法分析器：词法分析阅读构成源程序的字符流，按编程语言的词法规则把它们组成词法记号流。</p><p>（2）语法分析器：按编程语言的语法规则检查词法分析输出的记号流是否符合这些规则，并依据这些规则所体现出的该语言的各种语言构造的层次性，用各记号的第一元建成一种树形的中间表示，这个中间表示用抽象语法的方式描绘了该记号流的语法情况。</p><p>（3）语义分析器：使用语法树和符号表中的信息，依据语言定义来检查源程序的语义一致性，以保证程序各部分能有意义地结合在一起。它还收集类型信息，把它们保存在符号表或语法树中。</p><p>（4）中间代码生成器:为源程序产生更低级的显示中间表示，可以认为这种中间表示是一种抽象机的程序。</p><p>（5）独立于机器的代码优化器：试图改进中间代码，以便产生较好的目标代码。通常，较好是指执行较快，但也可能是其他目标，如目标代码较短或目标代码执行时能耗较低。</p><p>（6）代码生成器：取源程序的一种中间表示作为输入并把它映射到一种目标语言。如果目标语言是机器代码，则需要为源程序所用的变量选择寄存器或内存单元，然后把中间指令序列翻译为完成同样任务的机器指令序列。</p><p>（7）依赖于机器的代码优化器：试图改进目标机器代码，以便产生较好的目标机器代码。</p><p><img src="https://i.loli.net/2020/10/07/MnPfJIyd5gHk9O7.jpg" alt="编译的各个阶段"></p><h3 id="3、有限自动机"><a href="#3、有限自动机" class="headerlink" title="3、有限自动机"></a>3、有限自动机</h3><p>有限怎么理解？</p><p>DFA和NAF区别？</p><h2 id="二、词法分析"><a href="#二、词法分析" class="headerlink" title="二、词法分析"></a>二、词法分析</h2><h3 id="1、正规式"><a href="#1、正规式" class="headerlink" title="1、正规式"></a>1、正规式</h3><p><img src="https://i.loli.net/2020/10/07/i5GdvVDb7n3QTug.jpg"></p><h4 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h4><p><img src="https://i.loli.net/2020/10/07/4ayfoIJP2KhFvmV.png"></p><h4 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h4><p><img src="https://i.loli.net/2020/10/07/TxoV4HmzGUBrPeQ.jpg"></p><p>至少含有一个1，因而需要正闭包1+，在出现1后面就会对其后是1还是0选择状态，如果是1，则停留在q2状态上，如果是0进入q3状态。在q3状态上，如果选择0进入q2状态，则实现了1后面两个0，如果是选择1进行q2状态，后面没有0，同样也是符合1后面偶数个0的，这样q2与q3本质是一种等价状态</p><p><img src="https://i.loli.net/2020/10/07/L3GJwuRWPe4692p.jpg"></p><h4 id="例3"><a href="#例3" class="headerlink" title="例3"></a>例3</h4><p><img src="https://i.loli.net/2020/10/07/eGdDkVhPj9Wt2o7.jpg"></p><p>换个意思理解，<strong>就是任何一个1后面都有偶数个0</strong></p><h4 id="例4"><a href="#例4" class="headerlink" title="例4"></a>例4</h4><p><img src="https://i.loli.net/2020/10/07/7oZyRakN6su4Czr.jpg"></p><p>解释：对于L来说描述的语言意思是0的个数是偶数并且1的个数是偶数，原因在于11、00必然是0偶1偶，而01、10要至少出现两次无论是0101,1010,0110,1001都能保证0偶1偶</p><p>对于L1</p><p>对于L2</p><p>对于L3</p><p>L2的另外一种表达形式</p><p><img src="https://i.loli.net/2020/10/07/Wx2rtOjsHJfG8d3.jpg"></p><h4 id="习题2-3"><a href="#习题2-3" class="headerlink" title="习题2.3"></a>习题2.3</h4><p>叙述下列正规式描述的语言</p><p>a) 0(0|1)<em>0<br>b) ((ε|0)1</em>)*<br>c) (0|1)<em>0(0|1)(0|1)<br>d) 0</em>10<em>10</em>10*<br>e) (00|11)<em>((01|10)(00|11)</em>(01|10)(00|11)<em>)</em></p><p>答案：<br>a)以0开始和结尾，而且长度大于等于2的0、1串<br>b)所有0,1串（含空串）<br>c)倒数第三位是0的0、1串<br>d) 仅含3个1的0、1串<br>e) 偶数个0和偶数个1的0、1串（含空串）</p><h3 id="2、有限自动机"><a href="#2、有限自动机" class="headerlink" title="2、有限自动机"></a>2、有限自动机</h3><p>NFA：不确定的有限自动机</p><p><img src="https://i.loli.net/2020/10/07/2Lkxh1Gat6peKRX.jpg"></p><p><img src="https://i.loli.net/2020/10/07/63xP9DJZMLC7GwS.jpg"></p><p>DFA：确定的有限自动机</p><p><img src="https://i.loli.net/2020/10/07/hcPH9qt63KQ71Ez.jpg"></p><h4 id="例1-1"><a href="#例1-1" class="headerlink" title="例1"></a>例1</h4><p><img src="https://i.loli.net/2020/10/07/lXCYcbJHoVLN1EP.jpg"></p><h4 id="例2-1"><a href="#例2-1" class="headerlink" title="例2"></a>例2</h4><p><img src="https://i.loli.net/2020/10/07/9Gqcsx3v4uNiO87.jpg"></p><p>还能表示的正规式是*<em>(b\</em>a+b)+**</p><p><strong>例题3</strong></p><p><img src="https://i.loli.net/2020/10/07/tp83CvyOWdzFRe4.jpg"></p><p><strong>例题4</strong></p><p><img src="https://i.loli.net/2020/10/07/cRArfuYDxCjd4KX.jpg"></p><h4 id="习题2-7"><a href="#习题2-7" class="headerlink" title="习题2.7"></a>习题2.7</h4><p>用算法2.4为下列正规式构造非确定的有限自动机，给出它们处理输入串ababbab的转换序列。<br>a) (a|b)*<br>b) (a*|b*)*<br>c)（（ε|a）b<em>）</em><br>d)(a|b)<em>abb(a|b)</em></p><p>答案：</p><p>a) (a|b)*</p><p><img src="https://i.loli.net/2020/10/12/6RiJeBmNOlvr2cM.png"></p><p>输入串ababbab 的转换序列：<br>0 1236 1456 1236 1456 1456 1236 14567</p><p>b) (a*|b*)*</p><p><img src="https://i.loli.net/2020/10/12/vUNf7stBg5X2hAE.png"></p><p>输入串ababbab 的转换序列：<br>0 1234510 1678910 1234510 167878910 12345610 167891011</p><p>c) ((ε|a)b*)*</p><p><img src="https://i.loli.net/2020/10/12/nfDp5F6PbMYNWe9.png"></p><p>输入串ababbab 的转换序列：<br>0 1456789 145678 789 1456789 10</p><p>D)（a|b)<em>abb(a|b)</em></p><p>NAF:</p><p><img src="https://i.loli.net/2020/10/12/lXaOgyNG2mDeMqh.png"></p><p>输入串ababbab 的转换序列：<br>0 1236 1456 789 10 11 12 13 16 11 14 15 16 17</p>]]></content>
      
      
      <categories>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三 </tag>
            
            <tag> 知识总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="2020/10/07/linux-chang-yong-ming-ling/"/>
      <url>2020/10/07/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-linux常用命令"><a href="#1-1-linux常用命令" class="headerlink" title="1.1-linux常用命令"></a>1.1-linux常用命令</h2><ol><li>root用户切换 <code>sudo su</code></li><li>显示当前文件路径 <code>pwd</code></li><li>显示当前目录内容 <code>ls</code> 显示隐藏文件<code>ls -a</code> 显示文件属性<code>ls -l</code> <code>ls -la</code></li><li>前往文件目录 <code>cd</code>  上一级目录 <code>cd ..</code> 当前目录 <code>cd .</code></li></ol><h2 id="1-2-操作文件命令"><a href="#1-2-操作文件命令" class="headerlink" title="1.2-操作文件命令"></a>1.2-操作文件命令</h2><ol><li><p><code>touch</code> 创建空文件</p></li><li><p><code>mkdir</code> 创建目录</p><p><code>-p</code> 父目录不存在的情况下先创建父目录</p></li><li><p><code>cp</code> 复制文件或目录</p><p><code>-r </code>递归处理</p></li><li><p><code>mv</code> 移动文件或目录、文件或目录改名</p><p> 文件改名 —&gt;  <code>mv  文件名   新文件名 </code></p><p> 文件移动—&gt;   <code>mv 文件名   目录名</code></p><p> 目录改名—&gt;  <code>mv 目录名   不存在的目录名</code></p><p> 目录移动—&gt; <code> mv  目录名  存在的目录名</code></p></li><li><p><code>rm</code> 删除文件</p><p><code>-r</code> 同时删除该目录下的所有文件</p><p><code>-f</code> 强制删除文件或者目录</p></li><li><p><code>rmdir</code> 删除空目录</p></li><li><p><code>cat</code> 显示文本内容</p></li><li><p><code>more</code> <code>less</code> 分页显示文本内容</p></li><li><p><code>head</code> <code>tail</code> 查看文本的开头或者结尾的文本内容</p><p>​    <code>head -n 5 a.log</code> 查看a.log的前5行内容</p></li><li><p><code>tail -f b.log</code> 循环读取</p></li><li><p><code>echo</code> 输出命令</p><p><code>echo hello world!</code>  屏幕输出</p><p><code>echo hello world!  &gt;&gt; a.txt</code> 内容输入到文件中</p></li></ol><h3 id="1-3-网络相关命令"><a href="#1-3-网络相关命令" class="headerlink" title="1.3-网络相关命令"></a>1.3-网络相关命令</h3><ol><li><p><code>ip addr</code> 查看ip地址</p></li><li><p><code>ifconfig</code> 查看网络信息 </p></li><li><p><code>ping</code> 测试网络连通性</p><p><code>ping https://www.baidu.com </code></p></li></ol><h3 id="1-4-tar命令"><a href="#1-4-tar命令" class="headerlink" title="1.4-tar命令"></a>1.4-tar命令</h3><ol><li><p><code>tar</code> </p><p><code>-c</code> 建立一个压缩文件</p><p><code>-x</code> 解开一个压缩文件</p><p><code>-z</code> 是否用 gzip压缩</p><p><code>-v</code> 压缩过程显示文件名</p><p><code>-f</code> 使用档名，在f后要立即接档名</p></li><li><p>通常使用的组合</p><p><code>tar -cvf  a.tar file1.txt file2.txt</code> 将file1和file2打包成a.tar</p><p><code>tar -zcvf  a.tar file1.txt file2.txt</code> </p><p><code>tar -zxvf  a.tar file1.txt file2.txt</code> 将 a.tar解压</p></li></ol><h3 id="1-5-systemctl服务命令"><a href="#1-5-systemctl服务命令" class="headerlink" title="1.5-systemctl服务命令"></a>1.5-systemctl服务命令</h3><ol><li><p><code>systemctl</code></p><p><code>systemctl status|start|stop|restart 服务名 mysql  firewalld(防火墙)  network(网络)</code></p><p><code>systemctl status|start|stop|restart 服务名</code> 查看服务状态｜启动｜停止｜重启</p></li></ol><h3 id="1-6-进程相关命令"><a href="#1-6-进程相关命令" class="headerlink" title="1.6-进程相关命令"></a>1.6-进程相关命令</h3><ol><li><p><code>ps</code> 查询当前在控制台上运行的进程</p><p><code>ps -aux</code>  参数a是所有进程，参数x包括不占用控制台的进程，参数u显示用户</p><p><code>ps -ef</code>  查询显示所有进程，包括后台进程，而且可以显示出每个进程的父进程号</p></li><li><p><code>top</code> 动态显示进程</p></li><li><p><code>kill</code> 杀死进程</p><p><code>kill  -9 8888</code>  -9表示强制杀死 8888号进程</p></li></ol><h3 id="1-7-权限相关命令"><a href="#1-7-权限相关命令" class="headerlink" title="1.7-权限相关命令"></a>1.7-权限相关命令</h3><ol><li><p><code>chmod</code> </p><p>all = user + group + other</p><p><code>chmod u+rwx, g+rwx ,o+rwx 文件</code></p><p><code>chmod a+rwx 文件</code> </p><p><code>+</code> 增加权限</p><p><code>-</code> 撤销权限</p><p><code>=</code> 设定权限</p><p><code>r</code> read可以读取，对于一个目录，如果没有r权限，那就不能通过ls查看这个目录的内容</p><p><code>w</code> write可以写入，对于一个目录，如果没有x权限，那就不能在该目录下创建新的文件</p><p><code>x</code> excute可以执行，对于一个目录，如果没有x权限，那就不能通过cd进入这个目录</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
